{
    "scopeName": "source.powerbasic",
    "fileTypes": [
        "bas",
		"bi",
		"inc"
    ],
    "firstLineMatch": "-[*]-( Mode:)? PowerBASIC -[*]-",
    "name":"PowerBASIC",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessor"
        },
        {
            "include": "#blocks"
        }
    ],
    "repository": {
		"blocks": {
			"comment": "Include all top-level code blocks: Function, Sub, Type, Class, etc.",
			"patterns": [
                {
                    "include": "#block_class"
                },
                {
                    "include": "#block_function"
                },
                {
					"include": "#block_sub"
                },
                {
					"include": "#block_type"
                }
            ]
		},
		"block_class": {
			"name": "meta.class.powerbasic",
			"begin": "(?=^\\s*\\bCLASS\\b\\s+(?!METHOD))",
			"end": "(\\bEND CLASS\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.class.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_class"
				},
				{
					"include": "#block_contents_class"
				}
			]
		},
		"block_function": {
			"name": "meta.process.function.powerbasic",
			"begin": "(?=^\\s*\\bFUNCTION\\b)",
			"end": "(\\bEND FUNCTION\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.function.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_function"
				},
				{
					"include": "#block_contents_process"
				}
			]
		},
		"block_interface": {
			"name": "meta.class.interface.powerbasic",
			"begin": "(?=^\\s*\\bINTERFACE\\b)",
			"end": "(\\bEND INTERFACE\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.interface.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_interface"
				},
				{
					"include": "#block_contents_interface"
				}
			]
		},
		"block_method": {
			"name": "meta.class.method.powerbasic",
			"begin": "(?=^\\s*(?:(?:CLASS|OVERRIDE)\\s+)?\\bMETHOD\\b)",
			"end": "(\\bEND METHOD\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.method.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_method"
				},
				{
					"include": "#block_contents_method"
				}
			]
		},
		"block_property": {
			"name": "meta.class.property.powerbasic",
			"begin": "(?=^\\s*\\bPROPERTY\\b)",
			"end": "(\\bEND PROPERTY\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.property.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_property"
				},
				{
					"include": "#block_contents_property"
				}
			]
		},
		"block_sub": {
			"name": "meta.process.sub.powerbasic",
			"begin": "(?=^\\s*\\bSUB\\b)",
			"end": "(\\bEND SUB\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.sub.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_sub"
				},
				{
					"include": "#block_contents_process"
				}
			]
		},
		"block_type": {
			"name": "meta.process.type.powerbasic",
			"begin": "(?=^\\s*\\bTYPE\\b)",
			"end": "(\\bEND TYPE\\b)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.type.end.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#declaration_line_type"
				},
				{
					"include": "#block_contents_type"
				}
			]
		},
		"comments": {
			"patterns": [
				{
		            "include": "#comment_block"
		        },
		        {
		            "include": "#comment_line"
		        }
			]
		},
        "comment_line": {
            "name": "comment.line.powerbasic",
            "begin": "(?:^\\s*|\\s+)(\\'|_)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.comment.powerbasic"
                }
            },
            "end": "\\n"
        },
        "comment_block": {
            "patterns": [
                {
                    "name": "comment.block.singleline.powerbasic",
                    "match": "^(/\\')(\\s*.*?)\\s*(\\'/)$\\n?",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        },
                        "2": {
                            "name": "meta.comment.block.contents.powerbasic"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                },
                {
                    "name": "comment.block.multiline.powerbasic",
                    "begin": "/\\'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        }
                    },
                    "end": "\\'/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                }
            ]
        },
        "block_contents_class": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#block_method"
                },
                {
                    "include": "#block_interface"
                },
                {
                    "include": "#variable_declaration"
                }
            ]
        },
        "block_contents_if": {
            "patterns": [
                {
                    "match": "\\s*\\b((ELSEIF))\\b\\s(.*)\\s\\b(THEN)",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.sub.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.elseif.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        "4": {
                            "name": "keyword.control.then.powerbasic"
                        }
                    }
                },
                {
                    "match": "((ELSE\\b))",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.else.powerbasic"
                        }
                    }
                },
                {
                    "include": "#block_contents_process"
                }
            ]
        },
        "block_contents_interface": {
            "patterns": [
				{
					"match": "(\\bINHERIT\\b)(?:\\s+(\\w+))?(?:\\s*,\\s*(\\w+))?",
					"captures": {
						"1": {
							"name": "keyword.inherit.interface.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"name": "keyword.iunknown.inherit.interface.powerbasic",
									"match": "\\bIUNKNOWN\\b"
								},
								{
									"name": "entity.name.class.inherit.interface.powerbasic",
									"match": "(?!\\bINKNOWN\\b)\\w+"
								}
							]
						},
						"3": {
							"name": "entity.name.class.inherit.interface.powerbasic"
						}
					}
				},
                {
                    "include": "#comments"
                },
                {
                    "include": "#block_method"
                },
                {
                    "include": "#block_property"
                }
            ]
        },
        "block_contents_method": {
            "patterns": [
                {
                    "include": "#block_contents_process"
                }
            ]
        },
        "block_contents_property": {
            "patterns": [
                {
                    "include": "#block_contents_process"
                }
            ]
        },
        "block_contents_process": {
            "patterns": [
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#labels"
                },
                {
                    "include": "#flow_control"
                },
                {
                    "include": "#variable_declaration"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "block_contents_type": {
            "patterns": [
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#variable"
                }
            ]
        },
		"declarations_outside_processes": {
            "patterns": [
				{
					"include": "#variable_declaration"
				},
				{
					"begin": "^\\s*(DECLARE)",
					"beginCaptures": {
						"1": {
							"name": "keyword.declare.powerbasic"
						}
					},
					"end": "(?!< _)\\n",
					"patterns": [
						{
							"include": "#declaration_line_function"
						},
						{
							"include": "#declaration_line_sub"
						}
					]
				}
            ]
		},
        "declaration_line_class": {
            "match": "^\\s*(CLASS(?!\\s+METHOD))(?:\\s+(?!METHOD)(\\w+))?",
            "captures": {
                "1": {
                    "name": "keyword.control.class.declare.powerbasic"
                },
                "2": {
                    "name": "entity.class.name.powerbasic"
                }
            }
        },
        "declaration_line_function": {
            "name": "meta.declaration.function.powerbasic",
            "begin": "(?:^|(?<=DECLARE))\\s*(FUNCTION)(?:\\s+([^\\s\\(]+))?(?:\\s+(ALIAS\\s+\"\\w*\")\\s)?(?:\\s*(\\())?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.function.declare.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#process_names_function"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_alias"
                        }
                    ]
                }
            },
			"end": "(?:(\\))(\\s+(?!AS)[A-Z]+)?(?:\\s+(AS\\s+[^\\s\\']+))?|(?<!_)\\n)",
			"endCaptures": {
				"2": {
                    "patterns": [
                        {
                            "include": "#process_descriptor"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#variable_type_specifier"
                        }
                    ]
                }
			},
			"patterns": [
				{
                    "name": "meta.arguments.process.powerbasic",
					"include": "#process_arguments"
				}
			]
        },
        "declaration_line_interface": {
            "match": "^\\s+(INTERFACE)(?:\\s+(\\w+))?",
            "captures": {
                "1": {
                    "name": "keyword.control.interface.declare.powerbasic"
                },
                "2": {
                    "name": "entity.interface.name.powerbasic"
                }
            }
        },
        "declaration_line_method": {
            "match": "^\\s*((?:(?:CLASS|OVERRIDE)\\s+)?METHOD)(?:\\s+(\\w+))?",
            "captures": {
                "1": {
                    "name": "keyword.control.method.declare.powerbasic"
                },
                "2": {
                    "name": "entity.method.name.powerbasic"
                }
            }
        },
        "declaration_line_property": {
            "match": "^\\s*(PROPERTY)(?:\\s+(GET|SET))?(?:\\s+(\\w+))?",
            "captures": {
                "1": {
                    "name": "keyword.control.property.declare.powerbasic"
                },
                "2": {
                    "name": "support.direction.property.powerbasic"
                },
                "3": {
                    "name": "variable.property.name.powerbasic"
                }
            }
        },
        "declaration_line_sub": {
            "begin": "(?:^|(?<=DECLARE))\\s*(SUB)(?:\\s+([^\\s\\(]+))?(?:\\s+(ALIAS\\s+\"\\w*\")\\s)?(?:\\s*(\\())?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.sub.declare.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#process_names_function"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_alias"
                        }
                    ]
                }
            },
            "end": "(?:(\\))?(?:\\s+(?!AS)([^\\s\\']+))?|(?<!_)\\n)",
			"endCaptures": {
				"2": {
                    "patterns": [
                        {
                            "include": "#process_descriptor"
                        }
                    ]
                }
			},
			"patterns": [
				{
					"include": "#process_arguments"
				}
			]
        },
        "declaration_line_type": {
            "match": "^\\s*(TYPE)(?:\\s+(\\w+))?",
            "captures": {
                "1": {
                    "name": "keyword.control.type.declare.powerbasic"
                },
                "2": {
                    "name": "variable.type.name.powerbasic"
                }
            }
        },
        "expression": {
            "name": "meta.expression.powerbasic",
            "patterns": [
                {
                    "comment": "consume nested expressions inside parentheses",
                    "name": "meta.expression.enclosed.parens",
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.open.parens.expression.powerbasic"
                        }
                    },
                    "end": "(\\)|(?<!_)\\n)",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.close.parens.expression.powerbasic"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "include": "#equates"
                },
                {
                    "include": "#quoted_string"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#numbers"
                },
				{
					"include": "#process_built-ins"
				},
				{
					"include": "#process_call"
				}
            ]
        },
        "expression_statement": {
            "comment": "match expressions on either side of operator",
            "name": "meta.expression.statement.powerbasic",
            "match": "\\s*(.*\\s)(=|>|<)(\\s.*)(?=\\)\\s|\\)\\)|\\)|)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#quoted_string"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#operators"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#quoted_string"
                        }
                    ]
                }
            }
        },
        "expression_numeric": {
            "comment": "statement which performs an assignment or comparison with only numeric values",
            "patterns": [
                {
                    "comment": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+"
                }
            ]
        },
        "expression_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.parens.open.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.parens.close.powerbasic",
                    "match": "\\)"
                }
            ]
        },
		"equates": {
			"patterns": [
				{
					"include": "#equates_numeric"
				},
				{
					"include": "#equates_string"
				}
			]
		},
		"equates_numeric": {
			"name": "meta.equate.powerbasic",
			"match": "(%\\w+\\b)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#equates_numeric_builtin"
						},
						{
							"name": "meta.support.equate.user-defined.powerbasic",
							"match": "%\\w+"
						}
					]
				}
			}
		},
		"equates_numeric_builtin": {
			"patterns": [
				{
					"name": "keyword.control.equate.isdefined.powerbasic",
					"match": "%DEF"
				}
			]
		},
		"equates_string": {
			"match": "(\\$\\w+\\b)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#equates_string_built-in"
						},
						{
							"name": "support.equate.user-defined.powerbasic",
							"match": "\\$\\w+"
						}
					]
				}
			}
		},
		"equates_string_built-in": {
			"patterns": [
				{
					"name": "support.equate.string.bell.powerbasic",
					"match": "$BEL"
				},
				{
					"name": "support.equate.string.backspace.powerbasic",
					"match": "$BS"
				},
				{
					"name": "support.equate.string.carraige-return.powerbasic",
					"match": "$CR"
				},
				{
					"name": "support.equate.string.crlf.powerbasic",
					"match": "$CRLF"
				},
				{
					"name": "support.equate.string.double-quote.powerbasic",
					"match": "$DQ"
				},
				{
					"name": "support.equate.string.two-double-quotes.powerbasic",
					"match": "$DQ2"
				},
				{
					"name": "support.equate.string.end-of-file.powerbasic",
					"match": "$EOF"
				},
				{
					"name": "support.equate.string.escape.powerbasic",
					"match": "$ESC"
				},
				{
					"name": "support.equate.string.form-feed.powerbasic",
					"match": "$FF"
				},
				{
					"name": "support.equate.string.line-feed.powerbasic",
					"match": "$LF"
				},
				{
					"name": "support.equate.string.null.powerbasic",
					"match": "$NUL"
				},
                {
                    "name": "support.equate.string.quote-comma-quote.powerbasic",
                    "match": "$QCQ"
                },
				{
					"name": "support.equate.string.space.powerbasic",
					"match": "$SPC"
				},
				{
					"name": "support.equate.string.single-quote.powerbasic",
					"match": "$SQ"
				},
				{
					"name": "support.equate.string.two-single-quotes.powerbasic",
					"match": "$SQ2"
				},
				{
					"name": "support.equate.string.horizontal-tab.powerbasic",
					"match": "$TAB"
				},
				{
					"name": "support.equate.string.vertical-tab.powerbasic",
					"match": "$VT"
				},
				{
					"name": "support.equate.string.whitespace.powerbasic",
					"match": "$WHITESPACE"
				}
			]
		},
        "flow_control": {
            "patterns": [
                {
                    "include": "#flow_control_if"
                },
                {
					"include": "#flow_control_do_loop"
                },
                {
					"include": "#flow_control_for_loop"
                },
                {
					"include": "#flow_control_select"
                },
                {
					"include": "#flow_control_try_block"
                },
                {
					"include": "#flow_control_while_loop"
                }
            ]
        },
		"flow_control_do_loop": {
			"comment": "do loop",
			"name": "meta.loop.do.powerbasic",
			"begin": "^\\s*(DO)(?:\\s+(WHILE|UNTIL))?((?:\\s+[^\\s\\':]+)+)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.begin.do_loop.powerbasic"
				},
				"2": {
					"name": "keyword.conditional.do_loop.powerbasic"
				},
				"3": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "^\\s*(LOOP)(?:\\s+(WHILE|UNTIL))?((?:\\s+[^\\s\\':]+)+)?",
			"endCaptures": {
				"1": {
					"name": "keyword.end.do_loop.powerbasic"
				},
				"2": {
					"name": "keyword.conditional.do_loop.powerbasic"
				},
				"3": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#block_contents_process"
				}
			]
		},
		"flow_control_for_loop": {
			"comment": "for loop",
			"begin": "^\\s*(FOR)(?:\\s+([^\\s\\']+))?\\s*(=)?((?:\\s+(?!TO)[^\\s\\']+)+)?(TO)?((?:\\s+(?!STEP)[^\\s\\']+)+)?(?:\\s+(STEP)(?:\\s+[^\\s\\']+)+)?",
			"beginCaptures": {
				"1": {
					"comment": "Begin FOR LOOP",
					"name": "keyword.begin.for_loop.powerbasic"
				},
				"2": {
					"comment": "counter variable",
					"patterns": [
						{
							"include": "#variable"
						}
					]
				},
				"3": {
					"comment": "equals sign for assigning range of FOR LOOP",
					"name": "support.operator.range.for_loop.powerbasic"
				},
				"4": {
					"comment": "Start of FOR LOOP range",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"5": {
					"name": "support.range_separator.for_loop.powerbasic"
				},
				"6": {
					"comment": "End of FOR LOOP range",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"7": {
					"name": "keyword.control.step_increment.for_loop.powerbasic"
				},
				"8": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "^\\s*(NEXT)(?:\\s+([^\\s\\']+))?",
			"endCaptures": {
				"1": {
					"name": "keyword.end.for_loop.powerbasic"
				},
				"2": {
					"patterns": [
						{
							"include": "#variable"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#block_contents_process"
				}
			]
		},
		"flow_control_if": {
			"patterns": [
				{
					"include": "#flow_control_if_single_line"
				},
				{
					"include": "#flow_control_if_start"
				},
				{
					"include": "#flow_control_if_block"
				}
			]
		},
		"flow_control_if_block": {
            "name": "meta.multi_line.if.powerbasic",
			"begin": "(\\bTHEN\\b)(?!\\s+[^\\s\\':])",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.then.if.powerbasic"
				}
			},
			"end": "(\\bEND IF\\b)",
            "endCaptures": {
                "1": {
                    "name": "keyword.control.end.if.powerbasic"
                }
            },
			"patterns": [
				{
					"include": "#block_contents_if"
				}
			]
		},
		"flow_control_if_single_line": {
            "name": "meta.single_line.if.powerbasic",
			"match": "(\\bTHEN\\b)((?:\\s+(?!ELSE)[^\\s\\']+)+)(?:\\s+\\b(ELSE)\\b)?((?:\\s+(?!ELSE)[^\\s\\'])+)?",
			"captures": {
				"1": {
					"name": "keyword.control.then.if.powerbasic"
				},
				"2": {
					"include": "#expression"
				},
				"3": {
					"name": "keyword.control.else.powerbasic"
				},
				"4": {
					"include": "#expression"
				}
			}
		},
        "flow_control_if_start": {
            "comment": "declare if statement",
			"name": "meta.declare.line.if.powerbasic",
            "begin": "^\\s*\\b(IF)\\b",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.begin.if.powerbasic"
                }
            },
            "end": "\\s+(?=\\bTHEN\\b|(?<!\\s_)\\n)",
			"endCaptures": {
				"1": {
					"name": "keyword.control.then.if.powerbasic"
				}
			},
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
		"flow_control_select": {
			"begin": "^\\s*(SELECT)\\b(?:\\s+(CASE)\\b)?(?:\\s+(AS\\s+[A-Z]+))?((?:\\s+[^\\s\\']+)+)?",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.begin.select.powerbasic"
				},
				"2": {
					"name": "keyword.control.case.select.powerbasic"
				},
				"3": {
					"patterns": [
						{
							"include": "#variable_type_specifier"
						}
					]
				},
				"4": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "^\\s*(END SELECT)\\b",
			"endCaptures": {
				"1": {
					"name": "keyword.control.end.select.powerbasic"
				}
			},
			"patterns": [
				{
					"match": "^\\s*(CASE)\\b(?:\\s+(IS))?((?:\\s+[^\\s\\']+)+)?",
					"captures": {
						"1": {
							"name": "keyword.control.case.select.powerbasic"
						},
						"2": {
							"name": "keyword.control.is.case.control.powerbasic"
						},
						"3": {
							"patterns": [
								{
									"include": "#expression"
								}
							]
						}
					}
				},
				{
					"name": "keyword.control.finally.try.powerbasic",
					"match": "^\\s*(CASE)\\b(?:\\s+(ELSE))?",
					"captures": {
						"1": {
							"name": "keyword.control.case.select.powerbasic"
						},
						"2": {
							"name": "keyword.control.else.case.control.powerbasic"
						}
					}
				},
				{
					"include": "#block_contents_process"
				}
			]
		},
		"flow_control_try_block": {
			"begin": "^\\s*(TRY)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.begin.try.powerbasic"
				}
			},
			"end": "^\\s*(END TRY)\\b",
			"endCaptures": {
				"1": {
					"name": "keyword.control.end.try.powerbasic"
				}
			},
			"patterns": [
				{
					"name": "keyword.control.catch.try.powerbasic",
					"match": "^\\s*(CATCH)\\b"
				},
				{
					"name": "keyword.control.finally.try.powerbasic",
					"match": "^\\s*(FINALLY)\\b"
				},
				{
					"include": "#block_contents_process"
				}
			]
		},
		"flow_control_while_loop": {
			"comment": "while loop",
			"begin": "^\\s*(WHILE)(?:\\s+(.*))?",
			"beginCaptures": {
				"1": {
					"name": "keyword.begin.while_loop.powerbasic"
				},
				"2": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "^\\s*(WEND)",
			"endCaptures": {
				"1": {
					"name": "keyword.end.while_loop.powerbasic"
				}
			},
			"patterns": [
				{
					"include": "#block_contents_process"
				}
			]
		},
		"labels": {
			"name": "support.label.powerbasic",
			"match": "\\b(\\w+:)",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#numbers"
						}
					]
				}
			}
		},
        "numbers": {
            "name": "constant.numeric.powerbasic",
            "match": "\\b((&(b|B)[0-1]*)(&(h|H)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
        },
		"objects": {
			"name": "meta.object.powerbasic",
			"match": "\\b(\\w+(?:\\(.*\\))?)(?:(\\.)\\b(\\w+(?:\\(.*\\))?))+",
			"captures": {
				"1": {
					"name": "meta.member.top-level.object",
					"patterns": [
						{
							"include": "#variable"
						}
					]
				},
				"2": {
					"name": "support.seperator.object.powerbasic"
				},
				"3": {
					"name": "meta.member.object",
					"patterns": [
						{
							"include": "#variable"
						},
						{
							"include": "#process_call"
						}
					]
				}
			}
		},
        "operators": {
            "patterns": [
                {
                    "comment": "match relational operators",
                    "match": "(=|<|>)",
                    "name": "support.operator.relational.powerbasic"
                },
                {
                    "comment": "match arithmetic operators",
                    "match": "([\\+\\-\\*\\/\\^]|\\bMOD\\b)",
                    "name": "support.operator.arithmetic.powerbasic"
                },
                {
                    "comment": "match logical operators",
                    "match": "\\b(AND|OR|NOT|XOR|EQV|IMP)\\b",
                    "name": "support.operator.logical.powerbasic"
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "include": "#preprocessor_if"
                },
                {
                    "include": "#preprocessor_metastatements"
                },
				{
					"include": "#declarations_outside_processes"
				}
            ]
        },
        "preprocessor_if": {
            "patterns": [
                {
                    "include": "#preprocessor_if_block"
                }
            ]
        },
        "preprocessor_if_start": {
            "comment": "start preprocessor if statement",
			"name": "meta.declare.line.if.powerbasic",
            "begin": "^\\s*(#\\bIF\\b)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.begin.if.powerbasic"
                }
            },
            "end": "(?<!\\s_)\\n",
            "patterns": [
                {
                    "include": "#preprocessor_if_expressions"
                }
            ]
        },
        "preprocessor_if_block": {
            "name": "meta.if.block.preprocessor.powerbasic",
			"begin": "(?=^\\s*#IF)",
			"end": "(#ENDIF\\b)",
            "endCaptures": {
                "1": {
                    "name": "keyword.control.endif.preprocessor.powerbasic"
                }
            },
			"patterns": [
				{
					"include": "#preprocessor_if_start"
				},
				{
					"include": "#preprocessor_if_contents"
				}
			]
        },
        "preprocessor_if_contents": {
            "patterns": [
                {
                    "begin": "(#\\bELSEIF\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.flow.elseif.preprocessor.powerbasic"
                        }
        			},
					"end": "(?<!\\s_)\\n",
					"endCaptures": {
						"1": {
							"name": "keyword.control.flow.then.powerbasic"
						}
					},
                    "patterns": [
                        {
                            "include": "#preprocessor_if_contents"
                        }
                    ]
                },
                {
                    "match": "(#\\bELSE\\b)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.flow.else.preprocessor.powerbasic"
                        }
                    }
                },
                {
                    "include": "#block_contents_process"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "preprocessor_if_expressions": {
			"patterns": [
				{
					"include": "#expression"
				}
			]
        },
        "preprocessor_metastatements": {
            "patterns": [
                {
                    "name": "meta.align.metastatement.preprocessor.powerbasic",
                    "match": "#(ALIGN)(\\s+[^\\s\\']+)?",
                    "captures": {
                        "1": {
                            "name": "keyword.align.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.align.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "constant.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "\\b(4|8|16|32|64|128|256|2)\\b"
                                },
                                {
                                    "name": "invalid.illegal.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "\\b(?!(4|8|16|32|64|128|256|2)).+\\b"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#(BLOAT)\\b(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.bloat.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.expression.bloat.metatstatement.preprocessor.powerbasic",
                            "match": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+",
                            "captures": {
                                "1": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                },
                                "2": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "3": {
                                    "patterns": [
                                        {
                                            "include": "#operators"
                                        }
                                    ]
                                },
                                "4": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "5": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                {
                    "match": "#(COMPILE)(\\s+[^\\s\\']+)?(?:\\s+(\".*\"))?",
                    "captures": {
                        "1": {
                            "name": "keyword.compile.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.compile.metastatement.preprocessor.powerbasic",
                                    "match": "(EXE|SLL)"
                                },
                                {
                                    "name": "invalid.keyword.compile.metastatement.preprocessor.powerbasic",
                                    "match": "\\b(?!(EXE|SLL)).+\\b"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#quoted_string"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#(COMPILER)(\\s+[^\\s\\']+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(PBCC|PBWIN)"
                                },
                                {
                                    "name": "invalid.keyword.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(?!(PBCC|PBWIN)).*"
                                }
                            ]
                        },
                        "3": {
                            "include": "#numbers"
                        }
                    }
                },
                {
                    "match": "#(OPTIMIZE)(\\s+[A-Z]{4,5}+\\s+[A-Z]{2,3}|[A-Z]+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.optimize.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.optimize.metatstatement.preprocessor.powerbasic",
                            "match":"^(CODE ON|CODE OFF|CODE|SPEED|SIZE)$"
                        },
                        "3": {
                            "name": "invalid.illegal.argument.optimize.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(OPTION)(\\s+[^\\s\\']+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.option.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)"
                                },
                                {
                                    "name": "invalid.illegal.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)).*"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.option.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(REGISTER)(\\s+[^\\s\\']+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.register.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(ALL|DEFAULT|NONE)"
                                },
                                {
                                    "name": "invalid.illegal.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ALL|DEFAULT|NONE))[^\\s\\']+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.register.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(DIM)(\\s+[^\\s\\']+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.dim.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.dim.metastatement.preprocessor.powerbasic",
                                    "match": "\\b(ALL|NONE)\\b"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.dim.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(UNIQUE)(\\s+[^\\s\\']+)?(\\s+[^\\s\\']+)?",
                    "captures": {
                        "1": {
                            "name": "keyword.unique.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.unique.metastatement.preprocessor.powerbasic",
                            "match": "\\b(VAR)\\b"
                        },
                        "3": {
                            "name": "support.state.argument.unique.metastatement.preprocessor.powerbasic",
                            "match": "\\b(ON|OFF)\\b"
                        },
                        "4": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(UTILITY)(\\s+\"[^\\']*\")?",
                    "captures": {
                        "1": {
                            "name": "keyword.utility.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "include": "#quoted_string"
                        }
                    }
                },
                {
                    "match": "#(BREAK)(?:\\s+(\\w+))?",
                    "captures": {
                        "1": {
                            "name": "keyword.break.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.break.metastatement.preprocessor.powerbasic",
                            "match": "(ON|OFF)"
                    	}
                    }
                },
                {
                    "match": "#(CONSOLE)(?:\\s+(\\w+))?",
                    "captures": {
                        "1": {
                            "name": "keyword.console.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.console.metastatement.preprocessor.powerbasic",
                            "match": "(ON|OFF)"
                        }
                    }
                },
                {
                    "match": "#(DEBUG)((?:\\s+[^\\s\\']+)+)?",
                    "captures": {
                        "1": {
                            "name": "keyword.debug.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "\\b(CODE ON|CODE OFF|CODE|DISPLAY ON|DISPLAY|ERROR OFF|ERROR ON|ERROR)\\b"
                                },
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "\\b(PRINT)\\b(?:\\s+(\".*\"))?",
                                    "captures": {
                                        "1": {
                                            "name": "support.print.debug.metastatement.preprocessor.powerbasic"
                                        },
                                        "2": {
                                            "name": "support.string.print.debug.metastatement.preprocessor.powerbasic",
                                            "patterns": [
                                                {
                                                    "include": "#quoted_string"
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#(TOOLS)(?:\\s+([^\\s\\']+))?",
                    "captures": {
                        "2": {
                            "name": "keyword.tools.metastatement.preprocessor.powerbasic"
                        },
                        "3": {
                            "name": "support.argument.tools.metastatement.preprocessor.powerbasic",
                            "match": "\\b(ON|OFF)\\b"
                        }
                    }
                },
                {
                    "match": "#(PAGE)\\b((?:\\s+[^\\']+)+)?",
                    "captures": {
                        "1": {
							"name": "keyword.page.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "invalid.illegal.argument.page.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(INCLUDE)\\b(?:\\s+(\\bONCE\\b\\s+)?(\".*\")|\\s+(\\bTHIS\\b(?:\\s+ONCE\\b)?))?",
                    "captures": {
                        "1": {
							"name": "keyword.include.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
							"name": "support.modifier.include.powerbasic"
                        },
						"3": {
							"patterns": [
								{
									"include": "#quoted_string"
								}
							]
						},
						"4": {
							"name": "support.modifier.include.powerbasic"
						}
                    }
                },
                {
                    "name": "keyword.link.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "name": "keyword.export.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "match": "(#RESOURCE)\\b(?:\\s+(\\w+))?(?:\\s*,\\s*(\\w+))?(?:\\s*,\\s*(\".*\")(?:\\$\\$)?)?(?:\\s*,\\s*(\\w+))?",
					"captures": {
						"1": {
							"name": "keyword.resource.metastatement.preprocessor.powerbasic"
						},
						"2": {
							"name": "support.type.resource.preprocessor.powerbasic",
							"match": "(BITMAP|ICON|MANIFEST|RCDATA|STRING|WAVE)"
						},
						"3": {
							"name": "support.resid.resource.preprocessor.powerbasic",
							"match": "\\b(\\d+|\\w+)"
						},
						"4": {
							"patterns": [
								{
									"include": "#quoted_string"
								}
							]
						},
						"5": {
							"name": "support.langid.resource.metastatement.preprocessor.powerbasic",
							"match": "&H\\d{4}"
						}
					}
                }
            ]
        },
        "process_alias": {
            "name": "meta.function.declaration.alias.powerbasic",
            "match": "(ALIAS)\\s+(\"\\w*\")",
            "captures": {
                "1": {
                    "name": "keyword.control.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "entity.name.alias.function.powerbasic",
                            "match": "\"[A-Za-z][A-Za-z0-9_]*\""
                        }
                    ]
                }
            }
        },
        "process_arguments": {
            "name": "meta.arguments.process.powerbasic",
            "patterns": [
                {
                    "name": "support.modifier.argument.process.powerbasic",
                    "match": "BY[A-Z]{3}"
                },
				{
					"include": "#variable"
				},
                {
                    "include": "#quoted_string"
                },
                {
					"include": "#numbers"
                },
                {
					"include": "#process_built-ins"
                },
                {
					"include": "#process_call"
                }
            ]
        },
		"process_built-ins": {
			"comment": "PowerBASIC built-in functions. Some have odd syntax (arguments w/o parentheses, arguments not comma-separated)",
			"patterns": [
				{
					"include": "#process_built-ins_console"
				},
				{
					"include": "#process_built-ins_error"
				},
				{
					"include": "#process_built-ins_file-io"
				},
				{
					"include": "#process_built-ins_flow"
				},
				{
					"include": "#process_built-ins_goto"
				},
				{
					"include": "#process_built-ins_info"
				},
				{
					"comment": "string equates",
					"name": "support.equate.string.powerbasic",
					"match": "(?<=[\\s\\(,])(\\${1,2}[A-Za-z]+)"
				},

                {
                    "name": "keyword.let.powerbasic",
                    "match": "\\bLET\\b"
                },
                {
                    "name": "keyword.parse.powerbasic",
                    "match": "\\bPARSE\\b(?:\\$)?"
                },
                {
                    "name": "keyword.shell.powerbasic",
                    "match": "\\bSHELL\\b"
                },
				{
					"match": "\\b(UCODEPAGE)((?:\\s+(?!TO)[^\\s\\']+)+)?(?:\\s+(TO))?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.command.ucodepage.powerbasic"
						},
						"2": {
							"name": "meta.new.codepage.powerbasic",
							"patterns": [
								{
									"name": "support.new.codepage.powerbasic",
									"match": "(ANSI|OEM)"
								},
								{
									"include": "#expression"
								}
							]
						},
						"3": {
							"name": "support.assign.previous.codepage.powerbasic"
						},
						"4": {
							"name": "support.previous.codepage.powerbasic",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						}
					}
				},
				{
					"comment": "",
					"name": "",
					"match": "",
					"captures": {
						"1": {
						}
					}
				}
			]
		},
		"process_built-ins_console": {
			"patterns": [
				{
					"comment": "clear screen",
					"name": "keyword.control.clear_screen.powerbasic",
					"match": "\\b(CLS)\\b"
				},
				{
					"comment": "console caption",
					"name": "keyword.control.console_caption.powerbasic",
					"match": "\\b(CONSNAME\\$)\\b"
				},
				{
					"comment": "console",
					"name": "keyword.control.console.powerbasic",
					"match": "\\b(CONSOLE)\\b"
				},
				{
					"comment": "console color",
					"name": "keyword.control.console_caption.powerbasic",
					"match": "\\b(COLOR)\\b"
				},
				{
					"comment": "get cursor position",
					"name": "keyword.control.get_cursor_pos.powerbasic",
					"match": "\\b(CURSOR[XY]?)\\b"
				},
				{
					"comment": "cursor size",
					"name": "keyword.control.cursor_size.powerbasic",
					"match": "\\b(CURSOR)\\b"
				},
				{
					"comment": "clear screen",
					"name": "keyword.control.clear_screen.powerbasic",
					"match": "\\b(CLS)\\b"
				},
				{
					"comment": "set cursor",
					"name": "keyword.control.set_cursor_pos.powerbasic",
					"match": "\\b(LOCATE)\\b"
				},
				{
					"comment": "console pseudo-object, standard syntax",
					"match": "\\s*\\b(CONSOLE|CON)\\b([\\.A-Z]+[#%&!\\?\\$]?(?:\\(.*\\))?)(?:\\s+(TO))?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.console.powerbasic"
						},
						"2": {
							"comment": "console methods",
							"patterns": [
								{
									"name": "",
									"match": ""
								}
							]
						},
						"3": {
							"name": "support.set.method.console.powerbasic"
						},
						"4": {
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						"5": {
							"patterns": [
								{
									"include": "#comment_line"
								}
							]
						}
					}
				},
				{
					"comment": "Play Wave Resource",
					"match": "\\b(PLAY\\b(?:\\s+WAVE\\b)?)((?:\\s+(?!TO)[^\\s\\',]+)+)?(?:(?:\\s+,\\s*(Loop|NoStop|Synch|YieldMS\\(.*\\)))+)?(?:\\s+(TO)((?:\\s+[^\\s\\']+)+))?",
					"captures": {
						"1": {
							"name": "keyword.control.wave.play.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#process_call"
								},
								{
									"include": "#variable"
								},
								{
									"include": "#quoted_string"
								},
								{
									"match": "(#)(\\d+)",
									"captures": {
										"1": {
											"name": "support.marker.id.numeric.powerbasic"
										},
										"2": {
											"name": "constant.numeric.powerbasic"
										}
									}
								}
							]
						},
						"3": {
							"name": "support.descriptor.wave.play.powerbasic"
						},
						"4": {
							"name": "support.assignment.success.powerbasic"
						},
						"5": {
							"patterns": [
								{
									"include": "#variable"
								}
							]
						}
					}
				},
				{
					"match": "\\b(SLEEP)\\b(?:\\s+(\\d+))?",
					"captures": {
						"1": {
							"name": "keyword.control.waitkey.powerbasic"
						},
						"2": {
							"name": "constant.numeric.powerbasic"
						}
					}
				},
				{
					"comment": "Wait for Keyboard Input",
					"name": "keyword.control.waitkey.powerbasic",
					"match": "\\b(WAITKEY\\$)"
				}
			]
		},
		"process_built-ins_error": {
			"patterns": [
				{
					"name": "keyword.control.erl.powerbasic",
					"match": "\\b(ERL\\$?)\\b"
				},
				{
					"match": "\\b(ERROR)\\b(?:\\s+([^\\s\\']+))?",
					"captures": {
						"1": {
							"name": "keyword.control.error.throw.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#numbers"
								}
							]
						}
					}
				},
				{
					"name": "keyword.control.current.error.powerbasic",
					"match": "\\b(ERR)\\b"
				},
				{
					"name": "keyword.control.clear.error.powerbasic",
					"match": "\\b(ERRCLEAR)\\b"
				},
				{
					"name": "keyword.control.description.error.powerbasic",
					"match": "\\b(ERROR\\$)"
				},
				{
					"match": "\\b(ON\\s+ERROR)\\b(?:\\s+(RESUME\\s+NEXT|GOTO\\s+\\w+))?",
					"captures": {
						"1": {
							"name": "keyword.control.on.error.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#process_built-ins_goto"
								},
								{
									"name": "keyword.control.resume.on.error.powerbasic",
									"match": "\\bRESUME\\s+NEXT\\b"
								}
							]
						}
					}
				}
			]
		},
		"process_built-ins_flow": {
			"patterns": [
				{
					"comment": "call process",
					"name": "keyword.control.clear_screen.powerbasic",
					"match": "\\b(CALL)\\b"
				},
				{
					"name": "keyword.control.end.powerbasic",
					"match": "\\b(END)\\b(?!\\s+[^\\s\\'])"
				},
				{
					"match": "(\\bEXIT\\b),?(\\s+[A-Z]+\\s)?",
					"captures": {
						"1": {
							"name": "keyword.control.exit.powerbasic"
						},
						"2": {
							"name": "keyword.structure.exit.powerbasic",
							"match": "(DO|FASTPROC|FOR|FUNCTION|IF|LOOP|MACRO|METHOD|PROPERTY|SELECT|SUB|TRY|ITERATE)"
						}
					}
				}
			]
		},
		"process_built-ins_file-io": {
			"patterns": [
				{
                    "name": "keyword.control.fileattr.powerbasic",
                    "match": "\\b(FILEATTR)\\b"
                },
				{
                    "name": "keyword.control.getattr.powerbasic",
                    "match": "\\b(GETATTR)\\b"
                },
				{
                    "name": "keyword.control.setattr.powerbasic",
                    "match": "\\b(SETATTR)\\b"
                },
                {
                    "name": "keyword.control.filecopy.powerbasic",
                    "match": "\\b(FILECOPY)\\b"
                },
                {
                    "name": "keyword.control.filename.powerbasic",
                    "match": "\\b(FILENAME\\$)"
                },
                {
                    "name": "keyword.control.filescan.powerbasic",
                    "match": "\\b(FILESCAN)\\b"
                },
				{
					"comment": "File Close",
					"match": "\\b(CLOSE)\\b(?:\\s+(#[^\\s\\'](?:(?:\\s+[^\\s\\']+)+)?))?",
					"captures": {
						"1": {
							"name": "keyword.control.close.powerbasic"
						},
						"2": {
							"name": "support.file_number.powerbasic",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						}
					}
				},
				{
					"comment": "File Open",
					"match": "\\b(OPEN HANDLE|OPEN)((?:\\s+(?!FOR|ACCESS|LOCK|AS)[^\\s\\']+)+)?((?:\\s+(?:\\b(?:FOR|ACCESS|LOCK|AS|LEN|BASE|CHR)\\b(?:\\s+(?!FOR|ACCESS|LOCK|AS|LEN|BASE|CHR)[^\\s\\']+)+))+)?",
					"captures": {
						"1": {
							"name": "keyword.control.open.powerbasic"
						},
						"2": {
							"name": "meta.file.open.powerbasic",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						"3": {
							"name": "meta.options.open.powerbasic",
							"patterns": [
								{
                                    "name": "meta.for.open.powerbasic",
									"match": "\\b(FOR)(?:\\s+(INPUT|OUTPUT|APPEND|BINARY|RANDOM))?",
									"captures": {
										"1": {
											"name": "keyword.for.open.powerbasic"
										},
										"2": {
											"name": "support.mode.for.open.powerbasic"
										}
									}
								},
								{
                                    "name": "meta.access.open.powerbasic",
									"match": "\\b(ACCESS)(?:\\s+(READ WRITE|READ|WRITE))?",
									"captures": {
										"1": {
											"name": "keyword.access.open.powerbasic"
										},
										"2": {
											"name": "support.mode.access.open.powerbasic"
										}
									}
								},
								{
                                    "name": "meta.lock.open.powerbasic",
									"match": "\\b(LOCK)(?:\\s+(READ WRITE|READ|WRITE|SHARED))?",
									"captures": {
										"1": {
											"name": "keyword.lock.open.powerbasic"
										},
										"2": {
											"name": "support.mode.lock.open.powerbasic"
										}
									}
								},
								{
                                    "name": "meta.as.open.powerbasic",
									"match": "\\b(AS)(?:\\s+(#[^\\s\\']+))?",
									"captures": {
										"1": {
											"name": "keyword.as.open.powerbasic"
										},
										"2": {
											"name": "support.file_number.powerbasic",
											"patterns": [
												{
													"include": "#expression"
												}
											]
										}
									}
								},
								{
                                    "name": "meta.len.open.powerbasic",
									"match": "\\b(LEN)\\b(?:\\s+(=))?((?:\\s+[^\\s\\']+)+)?",
									"captures": {
										"1": {
											"name": "keyword.len.open.powerbasic"
										},
										"2": {
											"name": "keyword.assignment.option.open.powerbasic"
										},
										"3": {
											"name": "support.mode.len.open.powerbasic",
											"patterns": [
												{
													"include": "#variable"
												},
												{
													"include": "#process_call"
												},
												{
													"include": "#numbers"
												}
											]
										}
									}
								},
								{
                                    "name": "meta.base.open.powerbasic",
									"match": "\\b(BASE)(?:\\s+(=))?(?:\\s+(0|1))?",
									"captures": {
										"1": {
											"name": "keyword.base.open.powerbasic"
										},
										"2": {
											"name": "keyword.assignment.option.open.powerbasic"
										},
										"3": {
											"name": "support.mode.base.open.powerbasic","patterns": [
												{
													"include": "#numbers"
												}
											]
										}
									}
								},
								{
                                    "name": "meta.chr.open.powerbasic",
									"match": "\\b(CHR)(?:\\s+(ANSI|WIDE))?",
									"captures": {
										"1": {
											"name": "keyword.chr.open.powerbasic"
										},
										"2": {
											"name": "support.mode.chr.open.powerbasic"
										}
									}
								}
							]
						}
					}
				},
				{
					"comment": "File read/write operations",
					"match": "\\s*(PRINT|WRITE|LINE INPUT|INPUT)(?:\\s+(#[^\\s\\'](?:(?:\\s+[^\\s\\']+)+)?),)?((?:\\s+[^\\s\\']+)+)?",
					"captures": {
						"1": {
							"name": "keyword.control.print.powerbasic"
						},
						"2": {
							"name": "support.file_number.powerbasic",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#expression"
								},
								{
									"name": "support.whitespace.print.powerbasic",
									"begin": "(TAB|SPC)\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#variable"
										},
										{
											"include": "#process_call"
										},
										{
											"include": "#numbers"
										}
									]
								},
								{
									"name": "punctuation.separator.expression.print.powerbasic",
									"match": "(,|;)"
								}
							]
						}
					}
				},
                {
                    "name": "keyword.freefile.powerbasic",
                    "match": "\\bFREEFILE\\b"
                },
                {
                    "name": "keyword.kill.powerbasic",
                    "match": "\\bKILL\\b"
                }
			]
		},
		"process_built-ins_goto": {
			"match": "\\b(GOTO)\\b(?:\\s+(\\w+))?",
			"captures": {
				"1": {
					"name": "keyword.control.goto.error.powerbasic"
				},
				"2": {
					"patterns": [
						{
							"include": "#numbers"
						},
						{
							"name": "support.label.goto.powerbasic",
							"match": "\\b\\w+\\b"
						}
					]
				}
			}
		},
		"process_built-ins_info": {
			"patterns": [
				{
					"name": "keyword.control.environ.powerbasic",
					"match": "\\b(ENVIRON\\$?)"
				},
				{
					"name": "keyword.control.funcname.powerbasic",
					"match": "\\b(FUNCNAME\\$)"
				},
				{
					"name": "keyword.parameter.powerbasic",
					"match": "\\bPARAMETER\\$"
				}
			]
		},
		"process_call": {
			"patterns": [
				{
		            "name": "meta.call.with_arguments.process.powerbasic",
		            "begin": "(\\b[A-Z]\\w*(?:%|&&|&|\\?\\?\\?|\\?\\?|\\?|!|##|#|@@|@|\\$\\$|\\$)?)(\\()",
		            "beginCaptures": {
		                "1": {
		                    "patterns": [
		                        {
		                            "include": "#process_names"
		                        }
		                    ]
		                },
		                "2": {
		                    "patterns": [
		                        {
		                            "include": "#process_punctuation"
		                        }
		                    ]
		                }
		            },
		            "end": "(\\)|(?<! _)\\n)",
		            "endCaptures": {
		                "1": {
		                    "patterns": [
		                        {
		                            "include": "#process_punctuation"
		                        }
		                    ]
		                }
		            },
		            "patterns": [
		                {
		                    "include": "#process_arguments"
		                }
		            ]
				},
				{
					"match": "(?<=[\\s\\.\\(,;=])(\\b[A-Z]\\w*(?:%|&&|&|\\?\\?\\?|\\?\\?|\\?|!|##|#|@@|@|\\$\\$|\\$)?)(?!\\()",
					"captures": {
						"1": {
							"name": "meta.call.without_arguments.process.powerbasic",
							"patterns": [
								{
									"include": "#process_names"
								}
							]
						}
					}
				}
			]
        },
        "process_descriptor": {
            "name": "keyword.process.descriptor.powerbasic",
            "match": "(EXPORT|COMMON|PRIVATE|THREADSAFE|LOCAL|STATIC|BDECL|CDECL|SDECL|THREAD)"
        },
        "process_names": {
			"patterns": [
				{
		            "name": "entity.name.process.powerbasic",
		            "match": "\\b([A-Z]\\w*[#%&!\\?\\$]*)"
				}
			]
        },
        "process_names_sub": {
            "patterns": [
                {
                    "name": "invalid.illegal.name.powerbasic",
                    "match": "\\w*[^\\w\\s\\.]\\w*\\b"
                },
                {
                    "comment": "Can't assign variable type on SUB, use FUNCTION instead",
                    "name": "invalid.specifier.type.variable.sub.powerbasic",
                    "match": "\\w+[#%&!\\?\\$]*"
                }
            ]
        },
        "process_names_function": {
            "patterns": [
                {
                    "name": "entity.name.process.user-defined.powerbasic",
                    "match": "[A-Z][A-za-z0-9_]*[#%&!\\?\\$]*"
                }
            ]
        },
        "process_punctuations": {
            "patterns": [
                {
                    "name": "punctuation.begin.arguments.process.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.separator.arguments.process.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.end.arguments.process.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "quoted_string": {
            "name": "string.quoted.double.powerbasic",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.powerbasic"
                }
            },
            "end": "(\"|(?<!_)\\n)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.powerbasic"
                }
            }
        },
		"statement": {
			"begin": "(^|:)",
			"end": "((?<!\"):(?!\")|\\s\\`|$)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
        "variable": {
            "patterns": [
                {
					"name": "meta.variable.powerbasic",
                    "begin": "\\b([a-z]\\w*[#%&!\\?\\$]*)(\\()",
                    "beginCaptures": {
                        "1": {
							"patterns": [
								{
		                            "include": "#variable_name"
								}
							]
                        },
                        "2": {
                            "name": "punctuation.begin.array.variable.powerbasic"
                        }
                    },
                    "end": "(\\))(?:\\s+(AS(?:\\s+[A-Z]\\w*)+(?:\\s+\\*\\s+\\d+)?))?",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.end.array.variable.powerbasic"
                        },
                        "2": {
							"patterns": [
								{
		                            "include": "#variable_type_specifier"
								}
							]
                        }
                    },
                    "patterns": [
                        {
                            "name": "punctuation.separator.array.variable.powerbasic",
                            "match": ","
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#numbers"
                        }
                    ]
                },
                {
                    "match": "\\b([a-z]\\w*[#%&!\\?\\$]*)(?:\\s+(AS(?:\\s+[A-Z]\\w*)+(?:\\s+\\*\\s+\\d+)?))?",
                    "captures": {
                        "1": {
							"patterns": [
								{
		                            "include": "#variable_name"
								}
							]
                        },
                        "2": {
							"patterns": [
								{
		                            "include": "#variable_type_specifier"
								}
							]
                        }
                    }
                }
            ]
        },
        "variable_array_indices":{
            "patterns": [
                {
                    "name": "meta.variable.array.index.first",
                    "match": "(\\(|,)(\\s*[^,\\)]*\\s*)(,|\\))",
                    "captures": {
                        "1": {
                            "include": "#variable_punctuation"
                        },
                        "2": {
                            "include": "#variable_array_index"
                        },
                        "3": {
                            "include": "#variable_punctuation"
                        }
                    }
                }
            ]
        },
		"variable_declaration": {
			"patterns": [
				{
					"comment": "variable declaration",
					"match": "^\\s*(LOCAL|STATIC|INSTANCE|THREADED|GLOBAL)((?:\\s+[^\\s\\']+)+)?",
					"captures": {
						"1": {
							"name": "keyword.declaration.scope.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#variable"
								}
							]
						}
					}
				},
				{
					"comment": "variable dimension",
					"match": "^\\s*(DIM)((?:\\s+[^\\s\\']+)+)?",
					"captures": {
						"1": {
							"name": "keyword.control.dimension.variable.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#variable"
								}
							]
						}
					}
				}
			]
		},
        "variable_name": {
			"name": "variable.powerbasic",
            "patterns": [
                {
                    "name": "variable.integer.powerbasic",
                    "match": "\\w+%"
                },
                {
                    "name": "variable.integer.long.powerbasic",
                    "match": "\\w+&"
                },
                {
                    "name": "variable.integer.quad.powerbasic",
                    "match": "\\w+&&"
                },
                {
                    "name": "variable.byte.powerbasic",
                    "match": "\\w+\\?"
                },
                {
                    "name": "variable.word.powerbasic",
                    "match": "\\w+\\?\\?"
                },
                {
                    "name": "variable.word.double.powerbasic",
                    "match": "\\w+\\?\\?\\?"
                },
                {
                    "name": "variable.float.single.powerbasic",
                    "match": "\\w+!"
                },
                {
                    "name": "variable.float.double.powerbasic",
                    "match": "\\w+#"
                },
                {
                    "name": "variable.float.extended.powerbasic",
                    "match": "\\w+##"
                },
                {
                    "name": "variable.currency.powerbasic",
                    "match": "\\w+@"
                },
                {
                    "name": "variable.currency.extended.powerbasic",
                    "match": "\\w+@@"
                },
                {
                    "name": "variable.stringy.powerbasic",
                    "match": "\\w+\\$"
                },
                {
                    "name": "variable.string.wide.powerbasic",
                    "match": "\\w+\\$\\$"
                },
				{
					"name": "variable.unspecified.powerbasic",
					"match": "\\w+"
				}
            ]
        },
        "variable_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.variable.array.indices.begin.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.variable.array.indices.separator.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.variable.array.indices.end.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "variable_type_specifier": {
            "match": "(AS)(?:\\s+\\b(LOCAL|STATIC|INSTANCE|THREADED|GLOBAL)\\b)?(?:\\s+([A-Z]\\w*))?(?:\\s+(\\*)((?:\\s+[^\\s\\']+)+))?",
            "captures": {
                "1": {
                    "name": "support.identifier.type.variable.powerbasic"
                },
                "2": {
                    "name": "keyword.declaration.scope.powerbasic"
                },
                "3": {
                    "name": "keyword.control.type.dimension.powerbasic",
                    "match": "\\b(PTR|POINTER|INTEGER|LONG|QUAD|BYTE|WORD|DWORD|SINGLE|DOUBLE|EXT|EXTENDED|CUR|CURRENCY|CUX|CURRENCYX|STRING|ASCIIZ|STRINGZ|FIELD|WSTRING|WSTRINGZ|WFIELD|VARIANT|GUID|IAUTOMATION|IDISPATCH|IUNKNOWN)\\b"
                },
				"4": {
					"name": "support.assignment.length.dimension.powerbasic"
				},
				"5": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
            }
        }
    }
}
