{
    "scopeName": "source.powerbasic",
    "fileTypes": [
        "bas"
    ],
    "firstLineMatch": "-[*]-( Mode:)? PowerBASIC -[*]-",
    "name":"PowerBASIC",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessor"
        },
        {
            "include": "#processes"
        }
    ],
    "repository": {
        "standard_include": {
            "patterns": [
                {
                    "include": "#preprocessor_metastatement"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#process_declaration"
                },
                {
                    "include": "#conditional"
                },
                {
                    "include": "#variable_declaration"
                },
                {
                    "include": "#flow_control"
                },
                {
                    "include": "#process_call"
                },
                {
                    "include": "#statement"
                }
            ]
        },
		"comments": {
			"patterns": [
				{
		            "include": "#comment_block"
		        },
		        {
		            "include": "#comment_line"
		        }
			]
		},
        "comment_line": {
            "name": "comment.line.powerbasic",
            "begin": "(^|\\s+)\\'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.powerbasic"
                }
            },
            "end": "\\n|(?=\\?>)"
        },
        "comment_block": {
            "patterns": [
                {
                    "name": "comment.block.singleline.powerbasic",
                    "match": "^(/\\')(\\s*.*?)\\s*(\\'/)$\\n?",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        },
                        "2": {
                            "name": "meta.comment.block.contents.powerbasic"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                },
                {
                    "name": "comment.block.multiline.powerbasic",
                    "begin": "/\\'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        }
                    },
                    "end": "\\'/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                }
            ]
        },
        "preprocessor": {
            "patterns": [
                {
                    "include": "#preprocessor_if_block"
                },
                {
                    "include": "#preprocessor_metastatements"
                }
            ]
        },
        "preprocessor_if_block": {
            "comment": "preprocessor flow_control_if_block",
            "begin": "\\b(#(IF))\\s*(?:\\s+(.+)\\s+)?(THEN)(\\s\\'.*)?",
            "beginCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                },
                "2": {
                    "name": "keyword.control.if.preprocessor.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.preprocessor.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#comment_line"
                        }
                    ]
                }
            },
            "end": "(#(ENDIF))\\s+(.*)(\\s+\\'.*)?",
            "endCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                },
                "2": {
                    "name": "keyword.control.endif.preprocessor.powerbasic"
                },
                "3": {
                    "name": "invalid.illegal.expression.endif.preprocessor.powerbasic"
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#comment_line"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#preprocessor_if_contents"
                }
            ]
        },
        "preprocessor_if_contents": {
            "patterns": [
                {
                    "include": "#preprocessor_if_block"
                },
                {
                    "match": "(#(ELSEIF))\\s+(.*)THEN(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.sub.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.elseif.preprocessor.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_line"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "(#(ELSE))\\s+(.*)(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.else.preprocessor.powerbasic"
                        },
                        "3": {
                            "name": "invalid.illegal.expression.endif.preprocessor.powerbasic"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_line"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "$base"
                }
            ]
        },
        "preprocessor_metastatements": {
            "patterns": [
                {
                    "name": "meta.align.metastatement.preprocessor.powerbasic",
                    "match": "#(ALIGN)(\\s+\\S+)?",
                    "captures": {
                        "1": {
                            "name": "keyword.align.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.align.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "constant.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "\\b(4|8|16|32|64|128|256|2)\\b"
                                },
                                {
                                    "name": "invalid.illegal.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "\\b(?!(4|8|16|32|64|128|256|2)).+\\b"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#(BLOAT)\\b(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.bloat.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.expression.bloat.metatstatement.preprocessor.powerbasic",
                            "match": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+",
                            "captures": {
                                "1": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                },
                                "2": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "3": {
                                    "patterns": [
                                        {
                                            "include": "#operators"
                                        }
                                    ]
                                },
                                "4": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "5": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                {
                    "match": "#(COMPILE)(\\s+\\S+)?(?:\\s+(\".*\"))?",
                    "captures": {
                        "1": {
                            "name": "keyword.compile.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.compile.metastatement.preprocessor.powerbasic",
                                    "match": "(EXE|SLL)"
                                },
                                {
                                    "name": "invalid.keyword.compile.metastatement.preprocessor.powerbasic",
                                    "match": "\\b(?!(EXE|SLL)).+\\b"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#quoted_string"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "#(COMPILER)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(PBCC|PBWIN)"
                                },
                                {
                                    "name": "invalid.keyword.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(?!(PBCC|PBWIN)).*"
                                }
                            ]
                        },
                        "3": {
                            "include": "#numbers"
                        }
                    }
                },
                {
                    "match": "#(OPTIMIZE)(\\s+[A-Z]{4,5}+\\s+[A-Z]{2,3}|[A-Z]+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.optimize.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.optimize.metatstatement.preprocessor.powerbasic",
                            "match":"^(CODE ON|CODE OFF|CODE|SPEED|SIZE)$"
                        },
                        "3": {
                            "name": "invalid.illegal.argument.optimize.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(OPTION)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.option.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)"
                                },
                                {
                                    "name": "invalid.illegal.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)).*"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.option.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(REGISTER)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.register.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(ALL|DEFAULT|NONE)"
                                },
                                {
                                    "name": "invalid.illegal.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ALL|DEFAULT|NONE))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.register.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(DIM)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.dim.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.dim.metastatement.preprocessor.powerbasic",
                                    "match": "(ALL|NONE)"
                                },
                                {
                                    "name": "invalid.illegal.argument.dim.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ALL|NONE))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.dim.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(UNIQUE)(\\s+\\S+)?(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.unique.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(VAR)"
                                },
                                {
                                    "name": "invalid.illegal.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(?!VAR)\\S+"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "support.state.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.state.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "4": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(UTILITY)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.utility.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "include": "#quoted_string"
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(BREAK)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.break.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.break.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.break.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(CONSOLE)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.console.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.console.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.console.metastatement.preprocessor.powerbasic",
                                    "match": "(?!ON|OFF)"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "(#DEBUG)(\\s+[A-Z]+\\s+[A-Z]{2,3}|\\s+[A-Z]+\\s+\".*\"|\\s+[A_Z]+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.debug.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(CODE ON|CODE OFF|CODE|DISPLAY ON|DISPLAY|ERROR OFF|ERROR ON|ERROR)"
                                },
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(PRINT)(?:\\s+(\".*\"))?",
                                    "captures": {
                                        "1": {
                                            "name": "support.print.debug.metastatement.preprocessor.powerbasic"
                                        },
                                        "2": {
                                            "name": "support.string.print.debug.metastatement.preprocessor.powerbasic",
                                            "patterns": [
                                                {
                                                    "include": "#quoted_string"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "name": "invalid.illegal.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(CODE ON|CODE OFF|CODE|DISPLAY ON|DISPLAY|ERROR OFF|ERROR ON|ERROR|PRINT))\\S+(\\s+\\S+)?"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.debug.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(TOOLS)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "2": {
                            "name": "keyword.tools.metastatement.preprocessor.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "support.argument.tools.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.tools.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.debug.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(PAGE)\\b(\\s.*)?",
                    "captures": {
                        "1": {
							"name": "keyword.page.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "invalid.illegal.argument.page.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "#(INCLUDE)\\b(?:\\s+(\".*\"))?",
                    "captures": {
                        "1": {
							"name": "keyword.include.metastatement.preprocessor.powerbasic"
                        },
						"2": {
							"patterns": [
								{
									"include": "#quoted_string"
								}
							]
						}
                    }
                },
                {
                    "name": "keyword.link.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "name": "keyword.export.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "match": "(#RESOURCE)\\b(?:\\s+(\\w+))?(?:\\s*,\\s*(\\w+))?(?:\\s*,\\s*(\".*\")(?:\\$\\$)?)?(?:\\s*,\\s*(\\w+))?",
					"captures": {
						"1": {
							"name": "keyword.resource.metastatement.preprocessor.powerbasic"
						},
						"2": {
							"name": "support.type.resource.preprocessor.powerbasic",
							"match": "(BITMAP|ICON|MANIFEST|RCDATA|STRING|WAVE)"
						},
						"3": {
							"name": "support.resid.resource.preprocessor.powerbasic",
							"match": "\\b(\\d+|\\w+)"
						},
						"4": {
							"patterns": [
								{
									"include": "#quoted_string"
								}
							]
						},
						"5": {
							"name": "support.langid.resource.metastatement.preprocessor.powerbasic",
							"match": "&H\\d{4}"
						}
					}
                }
            ]
        },
        "expression": {
            "name": "meta.expression.powerbasic",
            "patterns": [
                {
                    "comment": "consume nested expressions inside parentheses",
                    "name": "meta.expression.enclosed.parens",
                    "begin": "(\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.open.parens.expression.powerbasic"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.close.parens.expression.powerbasic"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                {
                    "include": "#quoted_string"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#numbers"
                },
				{
					"include": "#process_built-ins"
				},
				{
					"include": "#process_call"
				}
            ]
        },
        "expression_statement": {
            "comment": "match expressions on either side of operator",
            "name": "meta.expression.statement.powerbasic",
            "match": "\\s*(.*\\s)(=|>|<)(\\s.*)(?=\\)\\s|\\)\\)|\\)|)",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#quoted_string"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#operators"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#quoted_string"
                        }
                    ]
                }
            }
        },
        "expression_numeric": {
            "comment": "statement which performs an assignment or comparison with only numeric values",
            "patterns": [
                {
                    "comment": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+"
                }
            ]
        },
        "expression_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.parens.open.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.parens.close.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "flow_control": {
            "patterns": [
                {
                    "include": "#flow_control_if_line"
                },
                {
                    "include": "#flow_control_if_block"
                },
                {
					"include": "#flow_control_do_loop"
                },
                {
					"include": "#flow_control_for_loop"
                },
                {
					"include": "#flow_control_while_loop"
                }
            ]
        },
		"flow_control_do_loop": {
			"comment": "do loop",
			"begin": "^\\s*(DO)(?:\\s+(WHILE|UNTIL))?(?:\\s+(.*))?",
			"beginCaptures": {
				"1": {
					"name": "keyword.begin.do_loop.powerbasic"
				},
				"2": {
					"name": "keyword.conditional.do_loop.powerbasic"
				},
				"3": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"end": "^\\s*(LOOP)(?:\\s+(WHILE|UNTIL))?(?:\\s+(.*))?",
			"endCaptures": {
				"1": {
					"name": "keyword.end.do_loop.powerbasic"
				},
				"2": {
					"name": "keyword.conditional.do_loop.powerbasic"
				},
				"3": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#flow_control_exits"
				},
				{
					"include": "#process_contents"
				}
			]
		},
		"flow_control_for_loop": {
			"comment": "for loop",
			"begin": "^\\s*(FOR)(?:\\s+(\\S+))?\\s*(=)?(?:\\s+(\\S+\\(.*\\)|(?!TO)\\S+)\\s+)?(TO)?(?:\\s+(\\S+\\(.*\\)|\\S+)\\s+)?(?:\\s+(STEP)\\s+(.*))?",
			"beginCaptures": {
				"1": {
					"comment": "Begin FOR LOOP",
					"name": "keyword.begin.for_loop.powerbasic"
				},
				"2": {
					"comment": "counter variable",
					"patterns": [
						{
							"include": "#variable"
						}
					]
				},
				"3": {
					"comment": "equals sign for assigning range of FOR LOOP",
					"name": "support.operator.range.for_loop.powerbasic"
				},
				"4": {
					"comment": "Start of FOR LOOP range",
					"patterns": [
						{
							"include": "#process_call"
						},
						{
							"include": "#variable"
						},
						{
							"include": "#numbers"
						}
					]
				},
				"5": {
					"name": "support.range_separator.for_loop.powerbasic"
				},
				"6": {
					"comment": "End of FOR LOOP range",
					"patterns": [
						{
							"include": "#process_call"
						},
						{
							"include": "#variable"
						},
						{
							"include": "#numbers"
						}
					]
				},
				"7": {
					"name": "keyword.control.step_increment.for_loop.powerbasic"
				},
				"8": {
					"patterns": [
						{
							"include": "#variable"
						},
						{
							"include": "#numbers"
						}
					]
				}
			},
			"end": "^\\s*(NEXT)(?:\\s+(\\S+))?",
			"endCaptures": {
				"1": {
					"name": "keyword.end.for_loop.powerbasic"
				},
				"2": {
					"patterns": [
						{
							"include": "#variable"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#process_contents"
				}
			]
		},
        "flow_control_if_block": {
            "comment": "multi-line if statement",
            "begin": "\\b((IF))\\s*(?:\\s+(.+)\\s+)?(\\bTHEN\\b)(\\s\\'.*)?",
            "beginCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.powerbasic"
                },
                "2": {
                    "name": "keyword.control.begin.ifblock.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#comment_line"
                        }
                    ]
                }
            },
            "end": "^\\s*((END IF))\\s+(.*)(\\s\\'.*)?",
            "endCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.powerbasic"
                },
                "2": {
                    "name": "keyword.control.end.ifblock.powerbasic"
                },
                "3": {
                    "name": "invalid.illegal.expression.endif.powerbasic"
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#comment_line"
                        }
                    ]
                }
            },
            "patterns": [
                {
					"name": "meta.contents.ifblock.powerbasic",
                    "include": "#flow_control_if_contents"
                }
            ]
        },
        "flow_control_if_line": {
            "name": "meta.conditional.singleline.powerbasic",
            "begin": "^\\s*((IF))\\s+(.*)\\s+(THEN)((?:\\s+[^\\s\\']+)+)(?:\\s+(\\'.*))?",
            "captures": {
                "1": {
                    "name": "meta.keyword.control.ifline.powerbasic"
                },
                "2": {
                    "name": "keyword.control.if.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "6": {
                    "patterns": [
                        {
                            "include": "#comment_line"
                        }
                    ]
                }
            },
            "end": "\\n"
        },
        "flow_control_if_contents": {
            "patterns": [
                {
                    "match": "\\s*\\b((ELSEIF))\\b\\s(.*)\\s\\b(THEN)(\\s\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.sub.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.elseif.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        "4": {
                            "name": "keyword.control.then.powerbasic"
                        },
                        "5": {
                            "patterns": [
                                {
                                    "include": "#comment_line"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "((ELSE\\b))\\s*(.*)(\\s\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.else.powerbasic"
                        },
                        "3": {
                            "name": "invalid.illegal.expression.endif.powerbasic"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_line"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "#process_contents"
                }
            ]
        },
		"flow_control_while_loop": {
			"comment": "while loop",
			"begin": "^\\s*WHILE",
			"end": "^\\s*WEND",
			"patterns": [
				{
					"include": "process_contents"
				}
			]
		},
        "numbers": {
            "name": "constant.numeric.powerbasic",
            "match": "\\b((&(b|B)[0-1]*)(&(h|H)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
        },
        "operators": {
            "patterns": [
                {
                    "comment": "match relational operators",
                    "match": "(=|<|>)",
                    "name": "support.operator.relational.powerbasic"
                },
                {
                    "comment": "match arithmetic operators",
                    "match": "([\\+\\-\\*\\/\\^]|MOD)",
                    "name": "support.operator.arithmetic.powerbasic"
                },
                {
                    "comment": "match logical operators",
                    "match": "\\b(AND|OR|NOT|XOR|EQV|IMP)\\b",
                    "name": "support.operator.logical.powerbasic"
                }
            ]
        },
		"processes": {
			"comment": "Include all process blocks: Function, Sub, etc.",
			"patterns": [
				{
					"include": "#process_declaration_function"
				},
				{
					"include": "#process_declaration_sub"
				}
			]
		},
        "process_alias": {
            "name": "meta.function.declaration.alias.powerbasic",
            "match": "(ALIAS)\\s+(\"\\w*\")\\s",
            "captures": {
                "1": {
                    "name": "keyword.control.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "entity.name.alias.function.powerbasic",
                            "match": "\"[A-Za-z][A-Za-z0-9_]*\""
                        }
                    ]
                }
            }
        },
        "process_arguments": {
            "name": "meta.process.arguments",
            "patterns": [
                {
                    "name": "support.modifier.argument.process.powerbasic",
                    "match": "BY[A-Z]{3}"
                },
				{
					"include": "#variable"
				},
                {
                    "include": "#quoted_string"
                },
                {
					"include": "#numbers"
                },
                {
					"include": "#process_call"
                }
            ]
        },
		"process_built-ins": {
			"comment": "PowerBASIC built-in functions. Some have odd syntax (arguments w/o parentheses, arguments not comma-separated)",
			"patterns": [
				{
					"comment": "variable declaration",
					"match": "^\\s*(LOCAL|STATIC|INSTANCE|THREADED|GLOBAL)((?:\\s+[^\\s\\']+)+)(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.declaration.variable.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#variable"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#comment_line"
								}
							]
						}
					}
				},
				{
					"comment": "variable dimension",
					"match": "^\\s*(DIM)((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.dimension.variable.powerbasic"
						},
						"2": {
							"patterns": [
								{
									"include": "#variable"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#comment_line"
								}
							]
						}
					}
				},
						{
							"comment": "clear screen",
							"name": "keyword.control.clear_screen.powerbasic",
							"match": "\\b(CLS)\\b"
						},
						{
							"comment": "console caption",
							"name": "keyword.control.console_caption.powerbasic",
							"match": "\\b(CONSNAME\\$)\\b"
						},
						{
							"comment": "console color",
							"name": "keyword.control.console_caption.powerbasic",
							"match": "\\b(COLOR)\\b"
						},
						{
							"comment": "get cursor position",
							"name": "keyword.control.get_cursor_pos.powerbasic",
							"match": "\\b(CURSOR[XY]?)\\b"
						},
						{
							"comment": "cursor size",
							"name": "keyword.control.cursor_size.powerbasic",
							"match": "\\b(CURSOR)\\b"
						},
						{
							"comment": "clear screen",
							"name": "keyword.control.clear_screen.powerbasic",
							"match": "\\b(CLS)\\b"
						},
						{
							"comment": "set cursor",
							"name": "keyword.control.set_cursor_pos.powerbasic",
							"match": "\\b(LOCATE)\\b"
						},
				{
					"comment": "console pseudo-object, standard syntax",
					"match": "\\s*\\b(CONSOLE|CON)\\b([\\.A-Z]+[%&!\\?\\$]?(?:\\(.*\\))?)(?:\\s+(TO))?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.console.powerbasic"
						},
						"2": {
							"comment": "console methods",
							"patterns": [
								{
									"name": "",
									"match": ""
								}
							]
						},
						"3": {
							"name": "support.set.method.console.powerbasic"
						},
						"4": {
							"patterns": [
								{
									"include": "#expression"
								}
							]
						},
						"5": {
							"patterns": [
								{
									"include": "#comment_line"
								}
							]
						}
					}
				},
				{
					"name": "keyword.control.end.powerbasic",
					"match": "\\b(END)\\b"
				},
				{
					"name": "keyword.control.environ.powerbasic",
					"match": "\\b(ENVIRON\\$?)\\b"
				},
				{
					"match": "(\\bEXIT\\b),?(\\s+[A-Z]+\\s)?",
					"captures": {
						"1": {
							"name": "keyword.control.exit.powerbasic"
						},
						"2": {
							"name": "support.structure.exit.powerbasic",
							"match": "(DO|FASTPROC|FOR|FUNCTION|IF|LOOP|MACRO|METHOD|PROPERTY|SELECT|SUB|TRY|ITERATE)"
						}
					}
				},
				{
					"comment": "File Close",
					"match": "\\b(CLOSE)\\b(?:\\s+(#.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.close.powerbasic"
						},
						"2": {
							"name": "support.file_number.powerbasic"
						}
					}
				},
				{
					"comment": "File Open",
					"match": "\\b(OPEN)(?:\\s+(#.*),?)?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.open.powerbasic"
						},
						"2": {
							"name": "support.file_number.powerbasic"
						},
						"3": {
							"patterns": [
								{
									"include": "#expression"
								},
								{
									"name": "support.whitespace.print.powerbasic",
									"begin": "(TAB|SPC)\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#variable"
										},
										{
											"include": "#process_call"
										},
										{
											"include": "#numbers"
										}
									]
								},
								{
									"name": "punctuation.separator.expression.print.powerbasic",
									"match": "(,|;)"
								}
							]
						}
					}
				},
				{
					"comment": "File read/write operations",
					"match": "^\\s*(PRINT|WRITE|LINE INPUT|INPUT)(?:\\s+(#.*),)?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.print.powerbasic"
						},
						"2": {
							"name": "support.file_number.powerbasic"
						},
						"3": {
							"patterns": [
								{
									"include": "#expression"
								},
								{
									"name": "support.whitespace.print.powerbasic",
									"begin": "(TAB|SPC)\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#variable"
										},
										{
											"include": "#process_call"
										},
										{
											"include": "#numbers"
										}
									]
								},
								{
									"name": "punctuation.separator.expression.print.powerbasic",
									"match": "(,|;)"
								}
							]
						}
					}
				},
				{
					"match": "\\b(UCODEPAGE)((?:\\s+(?!TO)\\S+)+)?(?:\\s+(TO))?((?:\\s+[^\\s\\']+)+)?(?:\\s+(\\'.*))?",
					"captures": {
						"1": {
							"name": "keyword.control.command.ucodepage.powerbasic"
						},
						"2": {
							"name": "meta.new.codepage.powerbasic",
							"patterns": [
								{
									"name": "support.new.codepage.powerbasic",
									"match": "(ANSI|OEM)"
								},
								{
									"include": "#expression"
								}
							]
						},
						"3": {
							"name": "support.assign.previous.codepage.powerbasic"
						},
						"4": {
							"name": "support.previous.codepage.powerbasic",
							"patterns": [
								{
									"include": "#expression"
								}
							]
						}
					}
				},
				{
					"comment": "",
					"name": "",
					"match": "",
					"captures": {
						"1": {
						}
					}
				}
			]
		},
		"process_call": {
			"patterns": [
				{
					"name": "meta.call.without_arguments.process.powerbasic",
					"match": "\\b([A-Z]\\w*[%&!\\?\\$]*)[\\s\\),;]",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#process_names"
								}
							]
						}
					}
				},
				{
		            "name": "meta.call.with_arguments.process.powerbasic",
		            "begin": "\\b([A-Z]\\w*[%&!\\?\\$]*)(\\()",
		            "beginCaptures": {
		                "1": {
		                    "patterns": [
		                        {
		                            "include": "#process_names"
		                        }
		                    ]
		                },
		                "2": {
		                    "patterns": [
		                        {
		                            "include": "#process_punctuation"
		                        }
		                    ]
		                }
		            },
		            "end": "(\\))",
		            "endCaptures": {
		                "1": {
		                    "patterns": [
		                        {
		                            "include": "#process_punctuation"
		                        }
		                    ]
		                }
		            },
		            "patterns": [
		                {
		                    "include": "#process_arguments"
		                }
		            ]
				}
			]
        },
        "process_contents": {
            "patterns": [
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_line"
                },
                {
                    "include": "#flow_control"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "process_declaration": {
            "name": "meta.process.declaration.powerbasic",
            "patterns": [
                {
                    "name": "meta.process.function.declaration.powerbasic",
                    "match": "^\\s*(FUNCTION.*)",
                    "captures": {
                        "1": {
                            "include": "#process_declaration_function"
                        }
                    }
                },
                {
                    "name": "meta.process.sub.declaration.powerbasic",
                    "match": "^\\s*(SUB.*)",
                    "captures": {
                        "1": {
                            "include": "#process_declaration_sub"
                        }
                    }
                }
            ]
        },
        "process_declaration_function": {
            "begin": "^\\s*(FUNCTION)(?:\\s+(\\S+))(?:\\s(ALIAS\\s+\\S+)\\s)?(?:\\s*(\\(.*\\)))(?:\\s+(?!AS)(\\S+))?(?:\\s+(AS\\s+\\S+))?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.function.declare.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#process_names_function"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_alias"
                        }
                    ]
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#process_arguments"
                        }
                    ]
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#process_descriptor"
                        }
                    ]
                },
                "6": {
                    "patterns": [
                        {
                            "include": "#variable_type_specifier"
                        }
                    ]
                }
            },
            "end": "(END FUNCTION)",
            "endCaptures": {
                "1": {
                    "name": "keyword.control.function.end.powerbasic"
                }
            },
            "patterns": [
                {
                    "include": "#process_contents"
                }
            ]
        },
        "process_declaration_sub": {
            "begin": "^\\s*(SUB)(?:\\s+(\\S+)\\s?)(?:\\s(ALIAS\\s+\\S+)\\s)?(\\(.*\\))?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.sub.declare.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#process_names_function"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#process_alias"
                        }
                    ]
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#process_arguments"
                        }
                    ]
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#process_descriptor"
                        }
                    ]
                }
            },
            "end": "(END SUB)",
            "endCaptures": {
                "1": {
                    "name": "keyword.control.sub.end.powerbasic"
                }
            },
            "patterns": [
                {
                    "include": "#process_contents"
                }
            ]
        },
        "process_descriptor": {
            "name": "keyword.process.descriptor.powerbasic",
            "match": "(EXPORT|COMMON|PRIVATE|THREADSAFE|LOCAL|STATIC|BDECL|CDECL|SDECL|THREAD)"
        },
        "process_names": {
            "name": "entity.name.process.powerbasic",
            "match": "\\b([A-Z]\\w*[%&!\\?\\$]*)"
        },
        "process_names_sub": {
            "patterns": [
                {
                    "name": "invalid.illegal.name.powerbasic",
                    "match": "\\w*[^\\w\\s\\.]\\w*\\b"
                },
                {
                    "comment": "Can't assign variable type on SUB, use FUNCTION instead",
                    "name": "invalid.specifier.type.variable.sub.powerbasic",
                    "match": "\\w+[%&!\\?\\$]*"
                }
            ]
        },
        "process_names_function": {
            "patterns": [
                {
                    "name": "entity.name.process.user-defined.powerbasic",
                    "match": "[A-Z][A-za-z0-9_]*[%&!\\?\\$]*"
                }
            ]
        },
        "process_punctuations": {
            "patterns": [
                {
                    "name": "punctuation.begin.arguments.process.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.separator.arguments.process.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.end.arguments.process.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "quoted_string": {
            "name": "string.quoted.double.powerbasic",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.powerbasic"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.powerbasic"
                }
            }
        },
		"statement": {
			"patterns": [
				{
					"comment": "Process call, including built-ins (PRINT, COLOR, etc)",
					"patterns": [
						{
							"include": "#process_built-ins"
						}
					]
				},
				{
					"comment": "",
					"name": "",
					"match": "",
					"patterns": [
						{
						}
					]
				},
				{
					"comment": "",
					"name": "",
					"match": "",
					"patterns": [
						{
						}
					]
				}
			]
		},
        "variable": {
            "patterns": [
                {
                    "name": "meta.variable.array.powerbasic",
                    "begin": "\\b([a-z]\\w*[%&!\\?\\$]*)(\\()",
                    "beginCaptures": {
                        "1": {
							"patterns": [
								{
		                            "include": "#variable_type"
								}
							]
                        },
                        "2": {
                            "name": "punctuation.begin.array.variable.powerbasic"
                        }
                    },
                    "end": "(\\))(?:\\s+(AS\\s+\\S+))?",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.end.array.variable.powerbasic"
                        },
                        "2": {
							"patterns": [
								{
		                            "include": "#variable_type_specifier"
								}
							]
                        }
                    },
                    "patterns": [
                        {
                            "name": "punctuation.separator.array.variable.powerbasic",
                            "match": ","
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#numbers"
                        }
                    ]
                },
                {
                    "name": "meta.variable.powerbasic",
                    "match": "\\b([a-z]\\w*[%&!\\?\\$]*)(?:\\s+(AS\\s+\\S+))?",
                    "captures": {
                        "1": {
							"patterns": [
								{
		                            "include": "#variable_type"
								}
							]
                        },
                        "2": {
							"patterns": [
								{
		                            "include": "#variable_type_specifier"
								}
							]
                        }
                    }
                }
            ]
        },
        "variable_array_indices":{
            "patterns": [
                {
                    "name": "meta.variable.array.index.first",
                    "match": "(\\(|,)(\\s*[^,\\)]*\\s*)(,|\\))",
                    "captures": {
                        "1": {
                            "include": "#variable_punctuation"
                        },
                        "2": {
                            "include": "#variable_array_index"
                        },
                        "3": {
                            "include": "#variable_punctuation"
                        }
                    }
                }
            ]
        },
        "variable_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.variable.array.indices.begin.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.variable.array.indices.separator.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.variable.array.indices.end.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "variable_type": {
			"name": "variable.powerbasic",
            "patterns": [
                {
                    "name": "variable.integer.type.powerbasic",
                    "match": "\\w+%"
                },
                {
                    "name": "variable.integer.long.type.powerbasic",
                    "match": "\\w+&"
                },
                {
                    "name": "variable.integer.quad.type.powerbasic",
                    "match": "\\w+&&"
                },
                {
                    "name": "variable.byte.type.powerbasic",
                    "match": "\\w+\\?"
                },
                {
                    "name": "variable.word.powerbasic.type",
                    "match": "\\w+\\?\\?"
                },
                {
                    "name": "variable.word.double.type.powerbasic",
                    "match": "\\w+\\?\\?\\?"
                },
                {
                    "name": "variable.float.single.type.powerbasic",
                    "match": "\\w+!"
                },
                {
                    "name": "variable.float.double.type.powerbasic",
                    "match": "\\w+#"
                },
                {
                    "name": "variable.float.extended.type.powerbasic",
                    "match": "\\w+##"
                },
                {
                    "name": "variable.currency.type.powerbasic",
                    "match": "\\w+@"
                },
                {
                    "name": "variable.currency.extended.type.powerbasic",
                    "match": "\\w+@@"
                },
                {
                    "name": "variable.stringy.type.powerbasic",
                    "match": "\\w+\\$"
                },
                {
                    "name": "variable.string.wide.type.powerbasic",
                    "match": "\\w+\\$\\$"
                },
				{
					"name": "variable.unspecified.type.powerbasic",
					"match": "\\w+"
				}
            ]
        },
        "variable_type_specifier": {
            "match": "(AS)\\s+([A-Z]+)",
            "captures": {
                "1": {
                    "name": "support.identifier.type.variable.powerbasic"
                },
                "2": {
                    "name": "support.variable.type.specifier",
                    "match": "(PTR|POINTER|INTEGER|LONG|QUAD|BYTE|WORD|DWORD|SINGLE|DOUBLE|EXT|EXTENDED|CUR|CURRENCY|CUX|CURRENCYX|STRING|ASCIIZ|STRINGZ|FIELD|WSTRING|WSTRINGZ|WFIELD|VARIANT|GUID|IAUTOMATION|IDISPATCH|IUNKNOWN)\\b"
                }
            }
        }
    }
}
