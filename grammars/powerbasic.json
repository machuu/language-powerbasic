{
    "scopeName": "source.powerbasic",
    "fileTypes": [
        "bas"
    ],
    "firstLineMatch": "-[*]-( Mode:)? PowerBASIC -[*]-",
    "name":"PowerBASIC",
    "patterns": [
        {
            "include": "#flow_control"
        }
    ],
    "repository": {
        "standard_include": {
            "patterns": [
                {
                    "include": "#preprocessor_metastatement"
                },
                {
                    "include": "#comment_block"
                },
                {
                    "include": "#comment_whitespace_leading"
                },
                {
                    "include": "#process_declaration"
                },
                {
                    "include": "#conditional"
                },
                {
                    "include": "#variable_declaration"
                },
                {
                    "include": "#flow_control"
                },
                {
                    "include": "#process_call"
                },
                {
                    "include": "#statement"
                }
            ]
        },
        "comment_whitespace_leading": {
            "name": "comment.line.powerbasic",
            "begin": "(^|\\s+)\\'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.powerbasic"
                }
            },
            "end": "\\n|(?=\\?>)"
        },
        "comment_block": {
            "patterns": [
                {
                    "name": "comment.block.singleline.powerbasic",
                    "match": "^(/\\')(\\s*.*?)\\s*(\\'/)$\\n?",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        },
                        "2": {
                            "name": "meta.comment.block.contents.powerbasic"
                        },
                        "3": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                },
                {
                    "name": "comment.block.multiline.powerbasic",
                    "begin": "/\\'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.begin.powerbasic"
                        }
                    },
                    "end": "\\'/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.end.powerbasic"
                        }
                    }
                }
            ]
        },
        "preprocessor_if_block": {
            "comment": "preprocessor if_block",
            "begin": "\\s*(#(IF))\\s+(.*)\\s+(THEN)(\\s+\\'.*)?",
            "beginCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                },
                "2": {
                    "name": "keyword.control.if.preprocessor.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.preprocessor.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            },
            "end": "(#(ENDIF))\\s+(.*)(\\s+\\'.*)?",
            "endCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                },
                "2": {
                    "name": "keyword.control.endif.preprocessor.powerbasic"
                },
                "3": {
                    "name": "invalid.illegal.expression.endif.preprocessor.powerbasic"
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#preprocessor_if_contents"
                }
            ]
        },
        "preprocessor_if_contents": {
            "patterns": [
                {
                    "include": "#preprocessor_if_block"
                },
                {
                    "match": "(#(ELSEIF))\\s+(.*)THEN(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.sub.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.elseif.preprocessor.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_whitespace_leading"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "(#(ELSE))\\s+(.*)(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.else.preprocessor.powerbasic"
                        },
                        "3": {
                            "name": "invalid.illegal.expression.endif.preprocessor.powerbasic"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_whitespace_leading"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "$base"
                }
            ]
        },
        "preprocessor_metastatement": {
            "match": "^\\s*(#\\S+(\\s+[^\\s\\']+)*)(\\s*\\'.*)?",
            "captures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#preprocessor_metastatements"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            }
        },
        "preprocessor_metastatements": {
            "patterns": [
                {
                    "name": "invalid.illegal.meta.preprocessor.powerbasic",
                    "match": "\\s*#[A-Z]*[^A-Z\\s]+.*"
                },
                {
                    "name": "meta.align.metastatement.preprocessor.powerbasic",
                    "match": "#(ALIGN)(\\s+\\S+)?\\s*(.+)?",
                    "captures": {
                        "1": {
                            "name": "keyword.align.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "constant.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "(4|8|16|32|64|128|256|2)"
                                },
                                {
                                    "name": "invalid.illegal.numeric.boundary.align.metastatement.powerbasic",
                                    "match": "(?!(4|8|16|32|64|128|256|2)).+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.align.metatstatement"
                        }
                    }
                },
                {
                    "name": "meta.keyword.bloat.metastatement.preprocessor.powerbasic",
                    "match": "#(BLOAT)\\b(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.bloat.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.expression.bloat.metatstatement.preprocessor.powerbasic",
                            "match": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+",
                            "captures": {
                                "1": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                },
                                "2": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "3": {
                                    "patterns": [
                                        {
                                            "include": "#operators"
                                        }
                                    ]
                                },
                                "4": {
                                    "name": "punctuation.parantheses.open.powerbasic"
                                },
                                "5": {
                                    "patterns": [
                                        {
                                            "include": "#numbers"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                {
                    "name": "meta.keyword.compile.metastatement.preprocessor.powerbasic",
                    "match": "#(COMPILE)(\\s+\\S+)?\\s+(\".*\")?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.compile.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.compile.metastatement.preprocessor.powerbasic",
                                    "match": "(EXE|SLL)"
                                },
                                {
                                    "name": "invalid.keyword.compile.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(EXE|SLL)).+"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#quoted_string"
                                }
                            ]
                        },
                        "4": {
                            "name": "invalid.illegal.argument.compile.metatstatement.preprocessor.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.compiler.metastatement.preprocessor.powerbasic",
                    "match": "#(COMPILER)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.compiler.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(PBCC|PBWIN)"
                                },
                                {
                                    "name": "invalid.keyword.name.compiler.metatstatement.preprocessor.powerbasic",
                                    "match": "(?!(PBCC|PBWIN)).*"
                                }
                            ]
                        },
                        "3": {
                            "include": "#numbers"
                        }
                    }
                },
                {
                    "name": "meta.keyword.optimize.metastatement.preprocessor.powerbasic",
                    "match": "#(OPTIMIZE)(\\s+[A-Z]{4,5}+\\s+[A-Z]{2,3}|[A-Z]+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.optimize.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "name": "support.argument.optimize.metatstatement.preprocessor.powerbasic",
                            "match":"^(CODE ON|CODE OFF|CODE|SPEED|SIZE)$"
                        },
                        "3": {
                            "name": "invalid.illegal.argument.optimize.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.option.metastatement.preprocessor.powerbasic",
                    "match": "#(OPTION)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.option.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)"
                                },
                                {
                                    "name": "invalid.illegal.argument.option.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ANSIAPI|LARGEMEM32|VERSION3|VERSION4|VERSION5|WIN95)).*"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.option.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.register.metastatement.preprocessor.powerbasic",
                    "match": "#(REGISTER)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.register.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(ALL|DEFAULT|NONE)"
                                },
                                {
                                    "name": "invalid.illegal.argument.register.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ALL|DEFAULT|NONE))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.register.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.dim.metastatement.preprocessor.powerbasic",
                    "match": "#(DIM)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.dim.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.dim.metastatement.preprocessor.powerbasic",
                                    "match": "(ALL|NONE)"
                                },
                                {
                                    "name": "invalid.illegal.argument.dim.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ALL|NONE))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.dim.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.unique.metastatement.preprocessor.powerbasic",
                    "match": "#(UNIQUE)(\\s+\\S+)?(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.unique.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(VAR)"
                                },
                                {
                                    "name": "invalid.illegal.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(?!VAR)\\S+"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "name": "support.state.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.state.argument.unique.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "4": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.keyword.utility.metastatement.preprocessor.powerbasic",
                    "match": "#(UTILITY)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.utility.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "include": "#quoted_string"
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "meta.break.metastatement.preprocessor.powerbasic",
                    "match": "#(BREAK)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.break.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.break.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.break.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "keyword.console.metastatement.preprocessor.powerbasic",
                    "match": "#(CONSOLE)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.console.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.console.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.console.metastatement.preprocessor.powerbasic",
                                    "match": "(?!ON|OFF)"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.unique.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "(#DEBUG)(\\s+[A-Z]+\\s+[A-Z]{2,3}|\\s+[A-Z]+\\s+\".*\"|\\s+[A_Z]+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.debug.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(CODE ON|CODE OFF|CODE|DISPLAY ON|DISPLAY|ERROR OFF|ERROR ON|ERROR)"
                                },
                                {
                                    "name": "support.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(PRINT)(\\s+\".*\")?",
                                    "captures": {
                                        "1": {
                                            "name": "support.print.debug.metastatement.preprocessor.powerbasic"
                                        },
                                        "2": {
                                            "name": "support.string.print.debug.metastatement.preprocessor.powerbasic",
                                            "patterns": [
                                                {
                                                    "include": "#quoted_string"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "name": "invalid.illegal.argument.debug.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(CODE ON|CODE OFF|CODE|DISPLAY ON|DISPLAY|ERROR OFF|ERROR ON|ERROR|PRINT))\\S+(\\s+\\S+)?"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.debug.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "match": "(#TOOLS)(\\s+\\S+)?\\s+(.*)",
                    "captures": {
                        "1": {
                            "name": "keyword.tools.metastatement.preprocessor.powerbasic"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "name": "support.argument.tools.metastatement.preprocessor.powerbasic",
                                    "match": "(ON|OFF)"
                                },
                                {
                                    "name": "invalid.illegal.argument.tools.metastatement.preprocessor.powerbasic",
                                    "match": "(?!(ON|OFF))\\S+"
                                }
                            ]
                        },
                        "3": {
                            "name": "invalid.illegal.argument.debug.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "keyword.page.metastatement.preprocessor.powerbasic",
                    "match": "#(PAGE)\\s+(.*)",
                    "captures": {
                        "2": {
                            "name": "invalid.illegal.argument.page.metastatement.powerbasic"
                        }
                    }
                },
                {
                    "name": "keyword.include.metastatement.preprocessor.powerbasic",
                    "match": "#(INCLUDE)"
                },
                {
                    "name": "keyword.link.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "name": "keyword.export.metastatement.preprocessor.powerbasic",
                    "match": ""
                },
                {
                    "name": "keyword.resource.metastatement.preprocessor.powerbasic",
                    "match": ""
                }
            ]
        },
        "expression": {
            "comment": "statement which performs an assignment or comparison",
            "patterns": [
                {
                    "comment": "consume nested expressions inside parentheses",
                    "name": "expression.enclosed.parens",
                    "begin": "[\\s\\(](\\()",
                    "beginCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#expression_punctuation"
                                }
                            ]
                        }
                    },
                    "end": "[^\\(](\\))",
                    "endCaptures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#expression_punctuation"
                                }
                            ]
                        }
                    },
                    "patterns": [
                        {
                            "include": "#expression"
                        },
                        {
                            "include": "#expression_statement"
                        }
                    ]
                },
                {
                    "include": "#expression_statement"
                }
            ]
        },
        "expression_statement": {
            "patterns": [
                {
                    "comment": "match expressions on either side of operator",
                    "name": "meta.expression.powerbasic",
                    "match": "\\s*(.*\\s)(=)(\\s.*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "include": "#process_call"
                                },
                                {
                                    "include": "#variable"
                                },
                                {
                                    "include": "#numbers"
                                },
                                {
                                    "include": "#quoted_string"
                                }
                            ]
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#operators"
                                }
                            ]
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#process_call"
                                },
                                {
                                    "include": "#variable"
                                },
                                {
                                    "include": "#numbers"
                                },
                                {
                                    "include": "#quoted_string"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "expression_numeric": {
            "comment": "statement which performs an assignment or comparison with only numeric values",
            "patterns": [
                {
                    "comment": "\\(?(\\d+)\\s*(\\))?([\\+\\-\\*\\/\\^])(\\()?\\s*(\\d+)+"
                }
            ]
        },
        "expression_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.parens.open.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.parens.close.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "flow_control": {
            "patterns": [
                {
                    "include": "#if_line"
                },
                {
                    "include": "#if_block"
                },
                {
                    "comment": "do loop",
                    "begin": "\\s*DO",
                    "end": "\\s*LOOP"
                },
                {
                    "comment": "for loop",
                    "begin": "\\s*FOR",
                    "end": "\\s*NEXT",
                    "patterns": [
                        {
                            "include": ""
                        }
                    ]
                },
                {
                    "comment": "while loop",
                    "begin": "\\s*WHILE",
                    "end": "\\s*WEND",
                    "patterns": [
                        {
                            "include": ""
                        }
                    ]
                }
            ]
        },
        "if_block": {
            "comment": "test if_block",
            "begin": "^\\s*((IF))\\b(\\s+.*\\s+)\\b(THEN)(\\s+\\'.*)?",
            "beginCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.powerbasic"
                },
                "2": {
                    "name": "keyword.control.if.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            },
            "end": "((END IF))\\s+(.*)(\\s+\\'.*)?",
            "endCaptures": {
                "1": {
                    "name": "meta.keyword.control.ifblock.powerbasic"
                },
                "2": {
                    "name": "keyword.control.endif.powerbasic"
                },
                "3": {
                    "name": "invalid.illegal.expression.endif.powerbasic"
                },
                "4": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#if_contents"
                }
            ]
        },
        "if_line": {
            "name": "meta.conditional.singleline.powerbasic",
            "begin": "\\s*((IF))\\s+(.*)\\s+(THEN)(\\s+[^\\s\\']+)+(\\s+\\'.*)?",
            "captures": {
                "1": {
                    "name": "meta.keyword.control.ifline.powerbasic"
                },
                "2": {
                    "name": "keyword.control.if.powerbasic"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#expression"
                        }
                    ]
                },
                "4": {
                    "name": "keyword.control.then.powerbasic"
                },
                "5": {
                    "patterns": [
                        {
                            "include": "#statement"
                        }
                    ]
                },
                "6": {
                    "patterns": [
                        {
                            "include": "#comment_whitespace_leading"
                        }
                    ]
                }
            },
            "end": "\\n"
        },
        "if_contents": {
            "patterns": [
                {
                    "include": "#if_test"
                },
                {
                    "match": "((ELSEIF))\\s+(.*)THEN(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.sub.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.elseif.powerbasic"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#expression"
                                }
                            ]
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_whitespace_leading"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "((ELSE))\\s+(.*)(\\s+\\'.*)?",
                    "captures": {
                        "1": {
                            "name": "meta.keyword.control.ifblock.powerbasic"
                        },
                        "2": {
                            "name": "keyword.control.else.powerbasic"
                        },
                        "3": {
                            "name": "invalid.illegal.expression.endif.powerbasic"
                        },
                        "4": {
                            "patterns": [
                                {
                                    "include": "#comment_whitespace_leading"
                                }
                            ]
                        }
                    }
                },
                {
                    "include": "$base"
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.powerbasic",
            "match": "\\b((&(b|B)[0-1]*)(&(h|H)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b"
        },
        "operators": {
            "patterns": [
                {
                    "comment": "match relational operators",
                    "match": "(=|<|>)",
                    "name": "support.operator.relational.powerbasic"
                },
                {
                    "comment": "match arithmetic operators",
                    "match": "([\\+\\-\\*\\/\\^]|MOD)",
                    "name": "support.operator.arithmetic.powerbasic"
                },
                {
                    "comment": "match logical operators",
                    "match": "(AND|OR|NOT|XOR|EQV|IMP)",
                    "name": "support.operator.logical.powerbasic"
                }
            ]
        },
        "quoted_string": {
            "name": "string.quoted.double.powerbasic",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.powerbasic"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.powerbasic"
                }
            }
        },
        "process_alias": {
            "name": "meta.function.declaration.alias.powerbasic",
            "match": "(ALIAS)\\s+(\\S+)\\s+",
            "captures": {
                "1": {
                    "name": "keyword.control.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "entity.name.alias.function.powerbasic",
                            "match": "\"[A-Za-z][A-Za-z0-9_]*\""
                        },
                        {
                            "name": "invalid.illegal.entity.name.alias.function.powerbasic",
                            "match": "(?!\"[A-Za-z][A-Za-z0-9_]*\")"
                        }
                    ]
                }
            }
        },
        "process_argument": {
            "name": "meta.process.argument.powerbasic",
            "match": "(BYREF\\s)?(.+)",
            "captures": {
                "1": {
                    "name": "support.modifier.argument.process.powerbasic",
                    "match": "BY[A-Z]{3}"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "support.modifier.argument.process.powerbasic",
                            "match": "BY[A-Z]{3}"
                        },
                        {
                            "include": "#quoted_string"
                        },
                        {
                            "include": "#variable_type_specifier"
                        },
                        {
                            "include": "#variable"
                        },
                        {
                            "include": "#process_call"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#process_punctuation"
                        }
                    ]
                }
            }
        },
        "process_arguments": {
            "name": "meta.process.arguments",
            "begin": "(\\(|\\b|,)",
            "beginCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_punctuation"
                        }
                    ]
                }
            },
            "end": "(,|\\))",
            "endCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_punctuation"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#process_argument"
                }
            ]
        },
        "process_call": {
            "name": "meta.call.process.powerbasic",
            "begin": "\\b([A-Z]\\w*[%&!\\?\\$]*)(\\()",
            "beginCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_names"
                        }
                    ]
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#process_punctuation"
                        }
                    ]
                }
            },
            "end": "(\\))\\s",
            "endCaptures": {
                "1": {
                    "patterns": [
                        {
                            "include": "#process_punctuation"
                        }
                    ]
                }
            },
            "patterns": [
                {
                    "include": "#process_arguments"
                }
            ]
        },
        "process_declaration": {
            "name": "meta.process.declaration.powerbasic",
            "patterns": [
                {
                    "name": "meta.process.function.declaration.powerbasic",
                    "match": "^\\s*(FUNCTION.*)",
                    "captures": {
                        "1": {
                            "include": "#process_declaration_function"
                        }
                    }
                },
                {
                    "name": "meta.process.sub.declaration.powerbasic",
                    "match": "^\\s*(SUB.*)",
                    "captures": {
                        "1": {
                            "include": "#process_declaration_sub"
                        }
                    }
                }
            ]
        },
        "process_declaration_function": {
            "name": "meta.function.declaration.powerbasic",
            "match": "(FUNCTION)\\s+(\\S+)\\s*(\\s+ALIAS\\s+\\S+\\s+|)\\s*(\\(.*\\))\\s*(\\s+\\S+\\s+|)\\s*(AS\\s+\\S+|)",
            "captures": {
                "1": {
                    "name": "keyword.control.powerbasic"
                },
                "2": {
                    "include": "#process_names_function"
                },
                "3": {
                    "include": "#process_alias"
                },
                "4": {
                    "include": "#process_arguments"
                },
                "5": {
                    "include": "#process_descriptor"
                },
                "6": {
                    "include": "#variable_type_specifier"
                }
            }
        },
        "process_declaration_sub": {
            "name": "meta.sub.declaration.powerbasic",
            "match": "(SUB)\\s+(\\S+)\\s+(ALIAS\\s+\".*\"\\s)?\\s*(\\(.*\\))\\s+(\\S+\\s+)\\s*(AS\\s+\\S+)?",
            "captures": {
                "1": {
                    "name": "keyword.control.powerbasic"
                },
                "2": {
                    "include": "#process_names_sub"
                },
                "3": {
                    "include": "#process_alias"
                },
                "4": {
                    "include": "#process_arguments"
                },
                "5": {
                    "include": "#process_descriptor"
                },
                "6": {
                    "comment": "Can't assign variable type on SUB, use FUNCTION instead",
                    "name": "invalid.specifier.type.variable.sub.powerbasic",
                    "match": "AS\\s+\\S+"
                }
            }
        },
        "process_descriptor": {
            "patterns": [
                {
                    "name": "keyword.function.descriptor.powerbasic",
                    "match": "(EXPORT|COMMON|PRIVATE|THREADSAFE|LOCAL|STATIC|BDECL|CDECL|SDECL|THREAD)"
                },
                {
                    "name": "invalid.illegal.keyword.function.descriptor.powerbasic",
                    "match": "(?!EXPORT|COMMON|PRIVATE|THREADSAFE|LOCAL|STATIC|BDECL|CDECL|SDECL|THREAD)"
                }
            ]
        },
        "process_names": {
            "patterns": [
                {
                    "comment": "Check against built-in function names",
                    "name": "name.process.built-in.powerbasic",
                    "match": "(STR|PRINT|INPUT)"
                },
                {
                    "name": "entity.name.process.user-defined.powerbasic",
                    "match": "[A-Z][A-za-z0-9_]*([%&!\\?\\$]+)?"
                },
                {
                    "name": "invalid.name.process.powerbasic",
                    "match": "(?![A-Z][A-za-z0-9_]*)\\S+"
                }
            ]
        },
        "process_names_sub": {
            "patterns": [
                {
                    "name": "invalid.illegal.name.powerbasic",
                    "match": "\\w*[^\\w\\s\\.]\\w*\\b"
                },
                {
                    "comment": "Can't assign variable type on SUB, use FUNCTION instead",
                    "name": "invalid.specifier.type.variable.sub.powerbasic",
                    "match": "\\w+[%&!\\?\\$]*"
                }
            ]
        },
        "process_names_function": {
            "patterns": [
                {
                    "name": "entity.name.process.user-defined.powerbasic",
                    "match": "[A-Z][A-za-z0-9_]*[%&!\\?\\$]*"
                },
                {
                    "name": "invalid.name.process.powerbasic",
                    "match": "(?!^[A-Z][A-za-z0-9_]*)"
                }
            ]
        },
        "process_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.process.arguments.begin.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.process.arguments.separator.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.process.arguments.end.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "statement": {
            "name": "meta.statement.powerbasic"
        },
        "variable": {
            "name": "meta.variable.powerbasic",
            "match": "\\b([a-z]\\w*[%&!\\?\\$]*)(\\(.*\\))?\\s*(\\s+AS\\s+\\S+)?",
            "captures": {
                "1": {
                    "include": "variable_type"
                },
                "2": {
                    "include": "variable_array_indices"
                },
                "3": {
                    "include": "variable_type_specifier"
                }
            }
        },
        "variable_array_indices":{
            "patterns": [
                {
                    "name": "meta.variable.array.index.first",
                    "match": "(\\(|,)(\\s*[^,\\)]*\\s*)(,|\\))",
                    "captures": {
                        "1": {
                            "include": "#variable_punctuation"
                        },
                        "2": {
                            "include": "#variable_array_index"
                        },
                        "3": {
                            "include": "#variable_punctuation"
                        }
                    }
                }
            ]
        },
        "variable_array_index": {
            "name": "meta.variable.array.index.powerbasic",
            "patterns": [
                {
                    "include": "#variables"
                },
                {
                    "include": "#numbers"
                }
            ]
        },
        "variable_punctuation": {
            "patterns": [
                {
                    "name": "punctuation.variable.array.indices.begin.powerbasic",
                    "match": "\\("
                },
                {
                    "name": "punctuation.variable.array.indices.separator.powerbasic",
                    "match": ","
                },
                {
                    "name": "punctuation.variable.array.indices.end.powerbasic",
                    "match": "\\)"
                }
            ]
        },
        "variable_type": {
            "patterns": [
                {
                    "match": "\\b\\w+[%&!\\?\\$]+",
                    "patterns": [
                        {
                            "name": "support.variable.type.integer",
                            "match": "\\w+%"
                        },
                        {
                            "name": "support.variable.type.integer.long",
                            "match": "\\w+&"
                        },
                        {
                            "name": "support.variable.type.integer.quad",
                            "match": "\\w+&&"
                        },
                        {
                            "name": "support.variable.type.byte",
                            "match": "\\w+\\?"
                        },
                        {
                            "name": "support.variable.type.word",
                            "match": "\\w+\\?\\?"
                        },
                        {
                            "name": "support.variable.type.word.double",
                            "match": "\\w+\\?\\?\\?"
                        },
                        {
                            "name": "support.variable.type.float.single",
                            "match": "\\w+!"
                        },
                        {
                            "name": "support.variable.type.float.double",
                            "match": "\\w+#"
                        },
                        {
                            "name": "support.variable.type.float.extended",
                            "match": "\\w+##"
                        },
                        {
                            "name": "support.variable.type.currency",
                            "match": "\\w+@"
                        },
                        {
                            "name": "support.variable.type.currency.extended",
                            "match": "\\w+@@"
                        },
                        {
                            "name": "support.variable.type.string",
                            "match": "\\w+\\$"
                        },
                        {
                            "name": "support.variable.type.string.wide",
                            "match": "\\w+$$"
                        }
                    ]
                },
                {
                    "name": "variable.type.unspecified",
                    "match": "\\b\\w+\\b"
                },
                {
                    "name": "invalid.illegal.variable.type",
                    "match": "\\b\\w+[^%&!\\?\\$]*"
                }
            ]
        },
        "variable_type_specifier": {
            "match": "(AS)\\s+(\\S+)",
            "captures": {
                "1": {
                    "name": "keyword.identifier.type.variable.powerbasic"
                },
                "2": {
                    "patterns": [
                        {
                            "name": "support.variable.type.specifier",
                            "match": "(PTR|POINTER|INTEGER|LONG|QUAD|BYTE|WORD|DWORD|SINGLE|DOUBLE|EXT|EXTENDED|CUR|CURRENCY|CUX|CURRENCYX|STRING|ASCIIZ|STRINGZ|FIELD|WSTRING|WSTRINGZ|WFIELD|VARIANT|GUID|IAUTOMATION|IDISPATCH|IUNKNOWN)\\b"
                        },
                        {
                            "name": "invalid.illegal.support.variable.type.specifier",
                            "match": "(?!(PTR|POINTER|INTEGER|LONG|QUAD|BYTE|WORD|DWORD|SINGLE|DOUBLE|EXT|EXTENDED|CUR|CURRENCY|CUX|CURRENCYX|STRING|ASCIIZ|STRINGZ|FIELD|WSTRING|WSTRINGZ|WFIELD|VARIANT|GUID|IAUTOMATION|IDISPATCH|IUNKNOWN))"
                        }
                    ]
                }
            }
        }
    }
}
